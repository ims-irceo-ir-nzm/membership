var modelName = modelName;
var getActionUrl = getActionUrl;
var fileManagerUrl = "";
var block = "Are you sure, you want active/deactive this user?";
var Display = "Are you sure, you want Diplay/Hidden this row?";
var tableID = tableID;
var pagingID = pagingID;
var publishMessage = "Publish";
var personId = personId;
var defaultTable = defaultTable;
var videoTxt = '';
function RedirectToUrl(data) {
    return window.location = data;
}
var articleMessage = "";
var nl_sendingCount = 0;
var nl_sentCount = 0;
var Tr = Tr;
$(document).ready(function () {
    /* Insert new option to dropdown list with other dropdown list. */

    $("input.focus").focus();

    $('[dropdown-update]').click(function () {
        var plugin = $(this);
        var model = $(this).attr('model');
        var id = $(this).val();
        var drop2 = $(this).attr('drop');
        var body = { id: id };
        $('#' + drop2).empty();
        SendObj(model, JSON.stringify(body), function (data) {
            if (data.isSuccess) {
                $.each(data.drop, function (index, value) {
                    $('#' + drop2).append(new Option(value[1], value[0], false, false));
                });
            } else {
                /**/
            }
        }, function (data) { });
    });
    $(".disable-target").prop('disabled', true);
    var userId;
    $(".table td .personPhoto").live('click', function (e) {
        userId = $(this).attr("userId");
        $('#files').click();
    });
    $('#files').change(function () {
        var id = userId;
        if (id === undefined)
            return;
        var data = new FormData();
        var files = $("#files").get(0).files;
        if (files.length > 0) {
            data.append("UploadPersonImage", files[0]);
        }
        $.ajax({
            url: "/BaseInfo/PersonPhoto/" + id,
            type: "POST",
            processData: false,
            contentType: false,
            data: data,
            success: function (data) {
                ShowToastr('', data.msg, data.model, 'toast-bottom-right');
            },
            error: function (er) {
                ShowToastr('خطا', '', data.model, 'toast-bottom-right');
            }
        });
    });
    if (!defaultTable) {
        defaultTable = "tblDefaultInformation";
    }
    try {
        $('.number-textbox, .numeric').numeric();
    } catch (ex) { }
    $('.dataTables_empty').parent().remove();
    selectableRow();
    //$('#FormInsertProvince').submit(function () {
    //    if ($(this).valid()) {
    //        $.ajax({
    //            url: modelName,
    //            type: this.method,
    //            data: $(this).serialize(),
    //            success: function (result) {
    //                var h = "<div class='modal fade in' id='portlet-form' tabindex='-1' role='dialog' aria-labelledby='myModalLabel' aria-hidden='false' style='display: block;'>";
    //                h += "<div class='modal-backdrop fade in'></div><div class='modal-dialog'><div class='modal-content'><div class='modal-header'><button type='button' class='close' data-dismiss='modal' aria-hidden='true' onclick='$(\"#portlet-form\").hide();'></button>";
    //                h += "<h4 class='modal-title'>Operation</h4></div><div class='modal-body'>";
    //                h += result;
    //                h += "</div><div class='modal-footer'><input onclick='$(\"#btnSave\").click();' type='submit' value='Save Changes' class='btn blue'/><button type='button' onclick='$(\"#portlet-form\").hide();' class='btn default' data-dismiss='modal'>Close</button></div></div></div></div>";
    //                $("#sectionContents").html(h);
    //            }
    //        });
    //    }
    //    return false;
    //});
    ///* Edit Row : send obect to controller for update row of database with Ajax.BeginForm */
    //$('#FormEdit').submit(function () {
    //    if ($(this).valid()) {
    //        $.ajax({
    //            url: modelName,
    //            type: this.method,
    //            data: $(this).serialize(),
    //            success: function (result) {
    //                DialogBoxMessage('Operation', result);
    //            }
    //        });
    //    }
    //    return false;
    //});
    ///* Get result of send and edit form controller, edit and add row to grid view */
    //$('#FormTest').submit(function () {
    //    $(".dataTables_empty").parent().remove();
    //    if ($(this).valid()) {
    //        $.ajax({
    //            url: modelName,
    //            type: this.method,
    //            data: $(this).serialize(),
    //            success: function (result) {
    //                /* Edit Object */
    //                if ($('#' + result[Object.keys(result)[0]]).length > 0) {
    //                    var rowEdited = $('#' + result[Object.keys(result)[0]])[0];
    //                    var j = 0;
    //                    for (j; j < Object.keys(result).length; j++)
    //                        rowEdited.cells[j].innerHTML = result[Object.keys(result)[j]];
    //                    showMessage('Edit Success', '', 'success');
    //                    $("#portlet-form").hide();
    //                }
    //                    /* Add Object */
    //                else {
    //                    if (tableID == null)
    //                        tableID = "sample_2";
    //                    var table = document.getElementById(tableID).getElementsByTagName('tbody')[0];
    //                    //var endRow = table.insertRow(table.rows.length);
    //                    var row = table.rows.item(table.rows.length - 1);
    //                    if (table.rows.length == 0) {
    //                        window.location.reload(true);
    //                    } else {
    //                        var newRow = row.cloneNode(true); // copy children too
    //                        var oldID = newRow.id;
    //                        newRow.id = result[Object.keys(result)[0]]; // change id or other attributes/contents

    //                        table.appendChild(newRow); // add new row to end of table
    //                        var j = 0;
    //                        for (j; j < Object.keys(result).length; j++)
    //                            newRow.cells[j].innerHTML = result[Object.keys(result)[j]];
    //                        newRow.cells[document.getElementById(tableID).rows[0].cells.length - 1].innerHTML = document.getElementById(tableID).rows[table.rows.length].cells[document.getElementById(tableID).rows[0].cells.length - 1].innerHTML.replace(oldID, newRow.id).replace(oldID, newRow.id);
    //                        showMessage('Add Success', '', 'success');
    //                        $('.image_upload_preview').attr('src', '');
    //                    }
    //                }
    //            }
    //        });
    //    }
    //    return false;
    //});
    jQuery('#' + localStorage.getItem("active")).find("a").prepend('<span class="selected"></span>');
    jQuery('#' + localStorage.getItem("active")).addClass('active').removeClass('active-select');
    try {
        Inbox.init();

        $("a.imgSlide").fancybox({
            'transitionIn': 'elastic',
            'transitionOut': 'elastic',
            'speedIn': 600,
            'speedOut': 200,
            'overlayShow': false,
            'type': 'image',
            afterShow: function () {
                //$(".fancybox-image").elevateZoom({ zoomType: "lens", lensShape: "round", lensSize: 200 });
                $(".onlymessagebox").addClass("d-none");
                //$('.fancybox-image').magnify();
            },
            afterClose: function () {
                $('img.zoomed').removeData('elevateZoom');//remove zoom instance from image
                $('.zoomWrapper img.zoomed').unwrap();
                $('.zoomContainer').remove();
                $(".onlymessagebox").removeClass("d-none");
            }
        });


    } catch (e) {

    }

});
function selectableRow() {
    $('#sample_2').on('click', 'tr', function (event) {
        $("#updateid").val($(this).find('.checkboxes').val());
        //if (!$(this).find('.checkboxes').parent().hasClass("checked"))
        //    $(this).find('.checkboxes').parent().addClass('checked');
        //else
        //$(this).find('.checkboxes').parent().removeClass('checked');

        $(this).closest("tr").siblings().removeClass("highlighted");
        $(this).toggleClass("highlighted");
        $('#btnGotoCitys').attr("href", "./" + getActionUrl + "/" + $("#updateProvinceid").val());
    });
}
function delRow(model, id) {
    bootbox.confirm(initializeculture.areyousureyouwantremovethisitem, function (result) {
        if (result) {
            var body = { id: id };
            $.ajax({
                type: "POST", url: model, data: JSON.stringify(body),
                contentType: "application/json; charset=utf-8", dataType: "json", success: function (data) {
                    if (data.isSuccess) {
                        if (data.model == "Journalist") {
                            UpgrateToJournalist(data, id);
                        }
                        //$('#' + id).remove();
                        var table = $('.myTable').DataTable();
                        var row = table.row('#' + id).remove().draw();
                        showMessage(data.errorMsg, '', 'success');
                        return;
                    } else {
                        DialogBoxMessageDelete('Error', data.errorMsg);
                    }
                }
            });
        } else { return; }
    });
}
$("[table]").click(function () {
    tableID = $(this).attr("table");
});
function DeleteImage(model, id) {
    bootbox.confirm("Are you sure you want to delete Image?", function (result) {
        var body = { id: id };
        if (result) { $.ajax({ type: "POST", url: model, data: JSON.stringify(body), contentType: "application/json; charset=utf-8", dataType: "json", success: function (data) { if (data.isSuccess) { showMessage(data.errorMsg, '', 'success'); $('#' + id).remove(); } else { DialogBoxMessageDelete('Error', data.errorMsg) } } }); } else { return; }
    });
}
function DialogBoxMessage(title, body) {
    var h = "<div class='modal fade in' id='portlet-form' tabindex='-1' role='dialog' aria-labelledby='myModalLabel' aria-hidden='false' style='display: block;'>";
    h += "<div class='modal-backdrop fade in'></div><div class='modal-dialog animated bounceInDown'><div class='modal-content'><div class='modal-header'><button type='button' class='close' data-dismiss='modal' aria-hidden='true' onclick='$(\"#portlet-form\").hide();'></button>";
    h += "<h4 class='modal-title'>" + title + "</h4></div><div class='modal-body' style='max-height:450px;overflow-y:auto'>";
    h += body;
    h += "</div><div class='modal-footer'><input onclick='$(\"#btnSave\").click();' type='submit' value='" + initializeculture.submit + "' class='btn btn-success'/><button type='button' onclick='$(\"#portlet-form\").hide();' class='btn btn-cancel' data-dismiss='modal'><i class=\"btn-dialog-cancel ti-back-right\"></i>&nbsp; " + initializeculture.close + "</button></div></div></div></div>";
    $("#sectionContents").html(h);
}
function DialogBoxOnlyMessage(title, body, modalwidth) {
    var h = "<div class='modal onlymessagebox fade in' id='portlet-form' tabindex='-1' role='dialog' aria-labelledby='myModalLabel' aria-hidden='false' style='display: block;'>";
    h += "<div class='modal-backdrop fade in'></div><div class='modal-dialog animated bounceInDown " + modalwidth + "'><div class='modal-content'><div class='modal-header'><button type='button' class='close' data-dismiss='modal' aria-hidden='true' onclick='$(\"#portlet-form\").hide();'></button>";
    h += "<h4 class='modal-title'>" + title + "</h4></div><div class='modal-body' style='max-height:450px;overflow-y:auto'>";
    h += body;
    h += "</div><div class='modal-footer d-none'><button type='button' onclick='$(\"#portlet-form\").hide();' class='btn btn-cancel' data-dismiss='modal'><i class=\"btn-dialog-cancel ti-close\"></i>&nbsp; بستن</button></div></div></div></div>";
    $("#sectionContents").html(h);
}
function DialogBoxMaxOnlyMessage(title, body) {
    var h = "<div class='modal fade in bs-example-modal-lg' id='portlet-form' tabindex='-1' role='dialog' aria-labelledby='myModalLabel' aria-hidden='false' style='display: block;'>";
    h += "<div class='modal-backdrop fade in'></div><div class='modal-dialog modal-lg animated bounceInDown'><div class='modal-content'><div class='modal-header'><button type='button' class='close' data-dismiss='modal' aria-hidden='true' onclick='$(\"#portlet-form\").hide();'></button>";
    h += "<h4 class='modal-title'>" + title + "</h4></div><div class='modal-body' style='max-height:450px;overflow-y:auto'>";
    h += body;
    h += "</div><div class='modal-footer d-none'><button type='button' onclick='$(\"#portlet-form\").hide();' class='btn btn-cancel' data-dismiss='modal'><i class=\"btn-dialog-cancel ti-close\"></i>&nbsp; بستن</button></div></div></div></div>";
    $("#sectionContents").html(h);
}
function DialogBoxMessageDelete(title, body) {
    var h = "<div class='modal fade in' id='portlet-form' tabindex='-1' role='dialog' aria-labelledby='myModalLabel' aria-hidden='false' style='display: block;'>";
    h += "<div class='modal-backdrop fade in'></div><div class='modal-dialog animated bounceInDown'><div class='modal-content'><div class='modal-header'><button type='button' class='close' data-dismiss='modal' aria-hidden='true' onclick='$(\"#portlet-form\").hide();'></button>";
    h += "<h4 class='modal-title'>" + title + "</h4></div><div class='modal-body' style='max-height:450px;overflow-y:auto'>";
    h += body;
    h += "</div><div class='modal-footer'><button type='button' onclick='$(\"#portlet-form\").hide();' class='btn btn-cancel' data-dismiss='modal'>بستن</button></div></div></div></div>";
    $("#sectionContents").html(h);
}
function FileUploadDialog(title) {
    var h = "<div class='modal fade in' id='portlet-form' tabindex='-1' role='dialog' aria-labelledby='myModalLabel' aria-hidden='false' style='display: block;'>";
    h += "<div class='modal-backdrop fade in'></div><div class='modal-dialog animated bounceInDown'><div class='modal-content'><div class='modal-header'><button type='button' class='close' data-dismiss='modal' aria-hidden='true' onclick='$(\"#portlet-form\").hide();'></button>";
    h += "<h4 class='modal-title'>" + title + "</h4></div><div class='modal-body' style='max-height:450px;overflow-y:auto'>";
    h += "<div class='' id='uploadProgress'><strong><label id='statusMessage'></label></strong><div class='progress progress-striped active' id='progressBar'><div class='progress-bar progress-bar-success' role='progressbar' aria-valuenow='100' aria-valuemin='0' aria-valuemax='100' style='width: 100%'></div></div></div>";
    h += "</div><div class='modal-footer'><button type='button' onclick='$(\"#portlet-form\").hide();' class='btn btn-cancel' data-dismiss='modal'><i class=\"fa fa-close\"></i>&nbsp; بستن</button></div></div></div></div>";
    $("#sectionContents").html(h);
}
function showMessage(_head, _body, _theme) {
    toastr.options = {
        "closeButton": true,
        "debug": false,
        "progressBar": true,
        "positionClass": "toast-bottom-right",
        "onclick": null,
        "showDuration": "300",
        "hideDuration": "1000",
        "timeOut": "5000",
        "extendedTimeOut": "1000",
        "showEasing": "swing",
        "hideEasing": "linear",
        "showMethod": "fadeIn",
        "hideMethod": "fadeOut"
    }
    if (_theme == "success")
        toastr.success(_body, _head)
    if (_theme == "error")
        toastr.error(_body, _head)
    if (_theme == "warning")
        toastr.warning(_body, _head)
    if (_theme == "info")
        toastr.info(_body, _head)
}

function CancelModalDone(result) {
    if (result.isSuccess) {
        $("#portlet-form").hide();
        $("#sectionContents").empty();
        window.location.reload();
    } else {
        ShowToastr(":(", result.msg, "error", "toast-bottom-right");
    }
}
function AddEdit(result) {
    switch (result.model) {
        case "Error":
            ShowToastr(":(", result.msg, "error", "toast-bottom-right");
            return;
        case "FormValidationFailed":
            showMessage(result.msg, '', 'error');
            return;
        case "multi_error":
            for (var i = 0; i < result.msg.length; i++) {
                ShowToastr(":(", result.msg[i], "error", "toast-bottom-right");
            }
            return;
        case "MessageAndRefresh":
            $("#portlet-form").hide();
            $("#sectionContents").empty();
            ShowToastr("", result.msg, "success", "toast-bottom-right");
            location.reload();
            return;
    }
    if (result == "") {
        showMessage('Operation failed', '', 'error');
        $("#portlet-form").hide();
        $("#sectionContents").empty()
        return;
    }
    if (result == "Close") {
        $("#portlet-form").hide();
        $("#sectionContents").empty()
        return;
    }
    if (result == "multi_error") {
        $("#portlet-form").hide();
        $("#sectionContents").empty()
        return;
    }
    if (result == "Refresh") {
        location.reload();
    }

    var isExpired = false;
    var changeColor = false;
    if (typeof result.IsExpired != "undefined" && result.IsExpired) {
        isExpired = true;
        var istart = 1;
        $.each(result, function (index, value) {
            if (index == "IsExpired") {
                delete result[index];
            }
            istart++;
        });
    }
    if (typeof result.IsExpired != "undefined" && result.IsExpired == false) {
        var istart = 1;
        $.each(result, function (index, value) {
            if (index == "IsExpired") {
                delete result[index];
                changeColor = true;
            }
            istart++;
        });
    }
    /*var arr = $.map(result, function (el) { return el; })*/
    /* Edit Row */
    if ($('#' + result[Object.keys(result)[0]]).length > 0) {
        var rowEdited = $('#' + result[Object.keys(result)[0]])[0];
        var j = 0;
        for (j; j < Object.keys(result).length; j++) {
            if (j == 0) {
                rowEdited.cells[j].innerHTML = "";
            } else {
                rowEdited.cells[j].innerHTML = (result[Object.keys(result)[j]]);
            }
        }
        if (isExpired) {
            $('#' + rowEdited.id).addClass('danger')
        }
        if (changeColor) {
            $('#' + rowEdited.id).removeClass('danger')
        }
        showMessage(initializeculture.edithasbeensuccessfully, '', 'success');
        $('.image_upload_preview').attr('src', '');
        $("#portlet-form").hide();
        $("#sectionContents").empty()
    }
    /* Add Row */
    else {
        /* Check tableID not null */
        if (tableID == null)
            tableID = "tblDefaultInformation";
        if ($('#' + tableID + ' tbody tr td').attr('class') == "dataTables_empty") {
            window.location.reload(true);
            $("#sectionContents").empty();
            return;
        }
        /* Get object from first row of table */
        var table = document.getElementById(tableID).getElementsByTagName('tbody')[0];
        var row = table.rows.item(table.rows.length - 1);
        if (table.rows.length == 0) {
            window.location.reload(true);
            $("#sectionContents").empty()
        }
        else {
            var array = $.map(result, function (value, index) {
                return [value];
            });
            array.push("", "");
            var beforeRow = table.rows.item(0);
            var otable = $('#' + tableID).DataTable();
            var endRow = otable.row.add(array).draw().node();
            $('#' + tableID + ' tr').removeClass("newRow");
            $(endRow).addClass("newRow");
            var oldID = beforeRow.id;
            endRow.id = result[Object.keys(result)[0]];
            //var ST = 0;
            //for (var j = 0; j < Object.keys(result).length; j++) {
            //    if (j != 0) {
            //        endRow.cells[j].innerHTML = result[Object.keys(result)[ST++]];
            //    } else {
            //        endRow.cells[j].innerHTML = result[Object.keys(result)[1]];
            //        ST++; ST++;
            //    }
            //}
            var cellCount = document.getElementById(tableID).rows[0].cells.length;
            endRow.cells[cellCount - 2].innerHTML = replaceAll(oldID, endRow.id, beforeRow.cells[cellCount - 2].innerHTML);//beforeRow.cells[cellCount - 2].innerHTML.replace(oldID, endRow.id);
            endRow.cells[cellCount - 1].innerHTML = replaceAll(oldID, endRow.id, beforeRow.cells[cellCount - 1].innerHTML);//beforeRow.cells[cellCount - 1].innerHTML.replace(oldID, endRow.id).replace(oldID, endRow.id);
            var j = 0;
            for (j; j < Object.keys(result).length; j++) {
                if (j != 0) {
                    endRow.cells[j].innerHTML = result[Object.keys(result)[j]];
                } else {
                    endRow.cells[j].innerHTML = "";
                }
            }
            if (isExpired) {
                $('#' + endRow.id).addClass('danger')
            }
            if (changeColor) {
                $('#' + endRow.id).removeClass('danger')
            }
            karinSetPer2480();
            showMessage(initializeculture.newitemsuccessfully, '', 'success');
            $('.image_upload_preview').attr('src', '');
            $("#portlet-form").hide();
            $("#sectionContents").empty();
        }
    }
    /* End Add Row */
}
function replaceAll(find, replace, str) {
    return str.replace(new RegExp(find, 'g'), replace);
}
$('.trash').click(function () {
    RemoveWithId($(this).attr('model'), $(this).closest("tr").attr("id"), "Are you sure you want remove this item?");
});
$('.Trash').click(function () {
    delRow($(this).attr('model'), $(this).attr('select'));
});
function RemoveWithId(model, id, title, fun) {
    bootbox.confirm(initializeculture.areyousureyouwantremovethisitem, function (result) {
        if (result) {
            var body = { id: id };
            $.ajax({
                type: "POST",
                url: model,
                data: JSON.stringify(body),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    if (fun == null) {
                        var table = $('.myTable').DataTable();
                        table.row('#' + data.id).remove().draw();
                        showMessage(data.msg, '', 'success');
                    }
                }
            });
        } else {
            return;
        }
    });
}
function largInsertModal(data) {
    //InsertDialog(data, "modal-lg");
    InsertDialog(data, "modal-xl");
}
function ReferalDialog(data) {
    InsertDialog(data, "", "ارجاع درخواست پشتیبانی");
}
function InsertDialog(data, mWidth, title) {

    var modalTitle = initializeculture.form_title;
    if (title !== undefined && title !== "" && title.responseText === undefined)
        modalTitle = title;

    var h = "<div class='modal fade in' id='portlet-form' tabindex='-1' role='dialog' aria-labelledby='myModalLabel' aria-hidden='false' style='display: block;'>";
    h += "<div class='modal-backdrop fade in'></div><div class='modal-dialog animated bounceInDown " + mWidth + " '><div class='modal-content'><div class='modal-header'><button type='button' class='close' data-dismiss='modal' aria-hidden='true' onclick='$(\"#portlet-form\").hide();'></button>";
    h += "<h4 class='modal-title'>" + modalTitle + "</h4></div><div class='modal-body' style='max-height:450px;overflow-y:auto'>";
    h += data;
    h += "</div><div class='modal-footer'><input onclick='$(\"#btnSave\").click();' type='submit' value=" + initializeculture.save + " class='btn blue'/><button type='button' onclick='$(\"#portlet-form\").hide();' class='btn btn-danger' data-dismiss='modal'><i class=\"fa fa-undo\"></i>&nbsp;&nbsp; " + initializeculture.close + "</button></div></div></div></div>";
    $("#sectionContents").html(h);
    try { $(".focus").focus(); } catch (ex) { }
    (function ($) {
        var $jQval = $.validator,
            adapters,
            data_validation = "unobtrusiveValidation";

        function setValidationValues(options, ruleName, value) {
            options.rules[ruleName] = value;
            if (options.message) {
                options.messages[ruleName] = options.message;
            }
        }

        function splitAndTrim(value) {
            return value.replace(/^\s+|\s+$/g, "").split(/\s*,\s*/g);
        }

        function escapeAttributeValue(value) {
            // As mentioned on http://api.jquery.com/category/selectors/
            return value.replace(/([!"#$%&'()*+,./:;<=>?@\[\\\]^`{|}~])/g, "\\$1");
        }

        function getModelPrefix(fieldName) {
            return fieldName.substr(0, fieldName.lastIndexOf(".") + 1);
        }

        function appendModelPrefix(value, prefix) {
            if (value.indexOf("*.") === 0) {
                value = value.replace("*.", prefix);
            }
            return value;
        }

        function onError(error, inputElement) {  // 'this' is the form element
            var container = $(this).find("[data-valmsg-for='" + escapeAttributeValue(inputElement[0].name) + "']"),
                replaceAttrValue = container.attr("data-valmsg-replace"),
                replace = replaceAttrValue ? $.parseJSON(replaceAttrValue) !== false : null;

            container.removeClass("field-validation-valid").addClass("field-validation-error");
            error.data("unobtrusiveContainer", container);

            if (replace) {
                container.empty();
                error.removeClass("input-validation-error").appendTo(container);
            }
            else {
                error.hide();
            }
        }

        function onErrors(event, validator) {  // 'this' is the form element
            var container = $(this).find("[data-valmsg-summary=true]"),
                list = container.find("ul");

            if (list && list.length && validator.errorList.length) {
                list.empty();
                container.addClass("validation-summary-errors").removeClass("validation-summary-valid");

                $.each(validator.errorList, function () {
                    $("<li />").html(this.message).appendTo(list);
                });
            }
        }

        function onSuccess(error) {  // 'this' is the form element
            var container = error.data("unobtrusiveContainer"),
                replaceAttrValue = container.attr("data-valmsg-replace"),
                replace = replaceAttrValue ? $.parseJSON(replaceAttrValue) : null;

            if (container) {
                container.addClass("field-validation-valid").removeClass("field-validation-error");
                error.removeData("unobtrusiveContainer");

                if (replace) {
                    container.empty();
                }
            }
        }

        function onReset(event) {  // 'this' is the form element
            var $form = $(this),
                key = '__jquery_unobtrusive_validation_form_reset';
            if ($form.data(key)) {
                return;
            }
            // Set a flag that indicates we're currently resetting the form.
            $form.data(key, true);
            try {
                $form.data("validator").resetForm();
            } finally {
                $form.removeData(key);
            }

            $form.find(".validation-summary-errors")
                .addClass("validation-summary-valid")
                .removeClass("validation-summary-errors");
            $form.find(".field-validation-error")
                .addClass("field-validation-valid")
                .removeClass("field-validation-error")
                .removeData("unobtrusiveContainer")
                .find(">*")  // If we were using valmsg-replace, get the underlying error
                .removeData("unobtrusiveContainer");
        }

        function validationInfo(form) {
            var $form = $(form),
                result = $form.data(data_validation),
                onResetProxy = $.proxy(onReset, form),
                defaultOptions = $jQval.unobtrusive.options || {},
                execInContext = function (name, args) {
                    var func = defaultOptions[name];
                    func && $.isFunction(func) && func.apply(form, args);
                }

            if (!result) {
                result = {
                    options: {  // options structure passed to jQuery Validate's validate() method
                        errorClass: defaultOptions.errorClass || "input-validation-error",
                        errorElement: defaultOptions.errorElement || "span",
                        errorPlacement: function () {
                            onError.apply(form, arguments);
                            execInContext("errorPlacement", arguments);
                        },
                        invalidHandler: function () {
                            onErrors.apply(form, arguments);
                            execInContext("invalidHandler", arguments);
                        },
                        messages: {},
                        rules: {},
                        success: function () {
                            onSuccess.apply(form, arguments);
                            execInContext("success", arguments);
                        }
                    },
                    attachValidation: function () {
                        $form
                            .off("reset." + data_validation, onResetProxy)
                            .on("reset." + data_validation, onResetProxy)
                            .validate(this.options);
                    },
                    validate: function () {  // a validation function that is called by unobtrusive Ajax
                        $form.validate();
                        return $form.valid();
                    }
                };
                $form.data(data_validation, result);
            }

            return result;
        }

        $jQval.unobtrusive = {
            adapters: [],

            parseElement: function (element, skipAttach) {
                /// <summary>
                /// Parses a single HTML element for unobtrusive validation attributes.
                /// </summary>
                /// <param name="element" domElement="true">The HTML element to be parsed.</param>
                /// <param name="skipAttach" type="Boolean">[Optional] true to skip attaching the
                /// validation to the form. If parsing just this single element, you should specify true.
                /// If parsing several elements, you should specify false, and manually attach the validation
                /// to the form when you are finished. The default is false.</param>
                var $element = $(element),
                    form = $element.parents("form")[0],
                    valInfo, rules, messages;

                if (!form) {  // Cannot do client-side validation without a form
                    return;
                }

                valInfo = validationInfo(form);
                valInfo.options.rules[element.name] = rules = {};
                valInfo.options.messages[element.name] = messages = {};

                $.each(this.adapters, function () {
                    var prefix = "data-val-" + this.name,
                        message = $element.attr(prefix),
                        paramValues = {};

                    if (message !== undefined) {  // Compare against undefined, because an empty message is legal (and falsy)
                        prefix += "-";

                        $.each(this.params, function () {
                            paramValues[this] = $element.attr(prefix + this);
                        });

                        this.adapt({
                            element: element,
                            form: form,
                            message: message,
                            params: paramValues,
                            rules: rules,
                            messages: messages
                        });
                    }
                });

                $.extend(rules, { "__dummy__": true });

                if (!skipAttach) {
                    valInfo.attachValidation();
                }
            },

            parse: function (selector) {
                /// <summary>
                /// Parses all the HTML elements in the specified selector. It looks for input elements decorated
                /// with the [data-val=true] attribute value and enables validation according to the data-val-*
                /// attribute values.
                /// </summary>
                /// <param name="selector" type="String">Any valid jQuery selector.</param>

                // $forms includes all forms in selector's DOM hierarchy (parent, children and self) that have at least one
                // element with data-val=true
                var $selector = $(selector),
                    $forms = $selector.parents()
                        .addBack()
                        .filter("form")
                        .add($selector.find("form"))
                        .has("[data-val=true]");

                $selector.find("[data-val=true]").each(function () {
                    $jQval.unobtrusive.parseElement(this, true);
                });

                $forms.each(function () {
                    var info = validationInfo(this);
                    if (info) {
                        info.attachValidation();
                    }
                });
            }
        };

        adapters = $jQval.unobtrusive.adapters;

        adapters.add = function (adapterName, params, fn) {
            /// <summary>Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation.</summary>
            /// <param name="adapterName" type="String">The name of the adapter to be added. This matches the name used
            /// in the data-val-nnnn HTML attribute (where nnnn is the adapter name).</param>
            /// <param name="params" type="Array" optional="true">[Optional] An array of parameter names (strings) that will
            /// be extracted from the data-val-nnnn-mmmm HTML attributes (where nnnn is the adapter name, and
            /// mmmm is the parameter name).</param>
            /// <param name="fn" type="Function">The function to call, which adapts the values from the HTML
            /// attributes into jQuery Validate rules and/or messages.</param>
            /// <returns type="jQuery.validator.unobtrusive.adapters" />
            if (!fn) {  // Called with no params, just a function
                fn = params;
                params = [];
            }
            this.push({ name: adapterName, params: params, adapt: fn });
            return this;
        };

        adapters.addBool = function (adapterName, ruleName) {
            /// <summary>Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation, where
            /// the jQuery Validate validation rule has no parameter values.</summary>
            /// <param name="adapterName" type="String">The name of the adapter to be added. This matches the name used
            /// in the data-val-nnnn HTML attribute (where nnnn is the adapter name).</param>
            /// <param name="ruleName" type="String" optional="true">[Optional] The name of the jQuery Validate rule. If not provided, the value
            /// of adapterName will be used instead.</param>
            /// <returns type="jQuery.validator.unobtrusive.adapters" />
            return this.add(adapterName, function (options) {
                setValidationValues(options, ruleName || adapterName, true);
            });
        };

        adapters.addMinMax = function (adapterName, minRuleName, maxRuleName, minMaxRuleName, minAttribute, maxAttribute) {
            /// <summary>Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation, where
            /// the jQuery Validate validation has three potential rules (one for min-only, one for max-only, and
            /// one for min-and-max). The HTML parameters are expected to be named -min and -max.</summary>
            /// <param name="adapterName" type="String">The name of the adapter to be added. This matches the name used
            /// in the data-val-nnnn HTML attribute (where nnnn is the adapter name).</param>
            /// <param name="minRuleName" type="String">The name of the jQuery Validate rule to be used when you only
            /// have a minimum value.</param>
            /// <param name="maxRuleName" type="String">The name of the jQuery Validate rule to be used when you only
            /// have a maximum value.</param>
            /// <param name="minMaxRuleName" type="String">The name of the jQuery Validate rule to be used when you
            /// have both a minimum and maximum value.</param>
            /// <param name="minAttribute" type="String" optional="true">[Optional] The name of the HTML attribute that
            /// contains the minimum value. The default is "min".</param>
            /// <param name="maxAttribute" type="String" optional="true">[Optional] The name of the HTML attribute that
            /// contains the maximum value. The default is "max".</param>
            /// <returns type="jQuery.validator.unobtrusive.adapters" />
            return this.add(adapterName, [minAttribute || "min", maxAttribute || "max"], function (options) {
                var min = options.params.min,
                    max = options.params.max;

                if (min && max) {
                    setValidationValues(options, minMaxRuleName, [min, max]);
                }
                else if (min) {
                    setValidationValues(options, minRuleName, min);
                }
                else if (max) {
                    setValidationValues(options, maxRuleName, max);
                }
            });
        };

        adapters.addSingleVal = function (adapterName, attribute, ruleName) {
            /// <summary>Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation, where
            /// the jQuery Validate validation rule has a single value.</summary>
            /// <param name="adapterName" type="String">The name of the adapter to be added. This matches the name used
            /// in the data-val-nnnn HTML attribute(where nnnn is the adapter name).</param>
            /// <param name="attribute" type="String">[Optional] The name of the HTML attribute that contains the value.
            /// The default is "val".</param>
            /// <param name="ruleName" type="String" optional="true">[Optional] The name of the jQuery Validate rule. If not provided, the value
            /// of adapterName will be used instead.</param>
            /// <returns type="jQuery.validator.unobtrusive.adapters" />
            return this.add(adapterName, [attribute || "val"], function (options) {
                setValidationValues(options, ruleName || adapterName, options.params[attribute]);
            });
        };

        $jQval.addMethod("__dummy__", function (value, element, params) {
            return true;
        });

        $jQval.addMethod("regex", function (value, element, params) {
            var match;
            if (this.optional(element)) {
                return true;
            }

            match = new RegExp(params).exec(value);
            return (match && (match.index === 0) && (match[0].length === value.length));
        });

        $jQval.addMethod("nonalphamin", function (value, element, nonalphamin) {
            var match;
            if (nonalphamin) {
                match = value.match(/\W/g);
                match = match && match.length >= nonalphamin;
            }
            return match;
        });

        if ($jQval.methods.extension) {
            adapters.addSingleVal("accept", "mimtype");
            adapters.addSingleVal("extension", "extension");
        } else {
            // for backward compatibility, when the 'extension' validation method does not exist, such as with versions
            // of JQuery Validation plugin prior to 1.10, we should use the 'accept' method for
            // validating the extension, and ignore mime-type validations as they are not supported.
            adapters.addSingleVal("extension", "extension", "accept");
        }

        adapters.addSingleVal("regex", "pattern");
        adapters.addBool("creditcard").addBool("date").addBool("digits").addBool("email").addBool("number").addBool("url");
        adapters.addMinMax("length", "minlength", "maxlength", "rangelength").addMinMax("range", "min", "max", "range");
        adapters.addMinMax("minlength", "minlength").addMinMax("maxlength", "minlength", "maxlength");
        adapters.add("equalto", ["other"], function (options) {
            var prefix = getModelPrefix(options.element.name),
                other = options.params.other,
                fullOtherName = appendModelPrefix(other, prefix),
                element = $(options.form).find(":input").filter("[name='" + escapeAttributeValue(fullOtherName) + "']")[0];

            setValidationValues(options, "equalTo", element);
        });
        adapters.add("required", function (options) {
            // jQuery Validate equates "required" with "mandatory" for checkbox elements
            if (options.element.tagName.toUpperCase() !== "INPUT" || options.element.type.toUpperCase() !== "CHECKBOX") {
                setValidationValues(options, "required", true);
            }
        });
        adapters.add("remote", ["url", "type", "additionalfields"], function (options) {
            var value = {
                url: options.params.url,
                type: options.params.type || "GET",
                data: {}
            },
                prefix = getModelPrefix(options.element.name);

            $.each(splitAndTrim(options.params.additionalfields || options.element.name), function (i, fieldName) {
                var paramName = appendModelPrefix(fieldName, prefix);
                value.data[paramName] = function () {
                    var field = $(options.form).find(":input").filter("[name='" + escapeAttributeValue(paramName) + "']");
                    // For checkboxes and radio buttons, only pick up values from checked fields.
                    if (field.is(":checkbox")) {
                        return field.filter(":checked").val() || field.filter(":hidden").val() || '';
                    }
                    else if (field.is(":radio")) {
                        return field.filter(":checked").val() || '';
                    }
                    return field.val();
                };
            });

            setValidationValues(options, "remote", value);
        });
        adapters.add("password", ["min", "nonalphamin", "regex"], function (options) {
            if (options.params.min) {
                setValidationValues(options, "minlength", options.params.min);
            }
            if (options.params.nonalphamin) {
                setValidationValues(options, "nonalphamin", options.params.nonalphamin);
            }
            if (options.params.regex) {
                setValidationValues(options, "regex", options.params.regex);
            }
        });

        $(function () {
            $jQval.unobtrusive.parse(document);
        });
    }(jQuery));
    try {
        $('#upDrownPermissionType').click(function () {
            var plugin = $(this);
            var model = $(this).attr('model');
            var id = $(this).val();
            var drop2 = $(this).attr('drop');
            $('#' + drop2).empty();
            var body = { id: id };
            SendObj(model, JSON.stringify(body), function (data) {
                if (data.isSuccess) {
                    $.each(data.drop, function (index, value) {
                        $('#' + drop2).append(new Option(value[1], value[0], false, false));
                    });
                } else {

                }
            }, function (data) {

            });
        });
        $('#upDrown').click(function () {
            var plugin = $(this);
            var model = $(this).attr('model');
            var id = $(this).val();
            var drop2 = $(this).attr('drop');
            $('#' + drop2).empty();
            var body = { id: id };
            SendObj(model, JSON.stringify(body), function (data) {
                if (data.isSuccess) {
                    $.each(data.drop, function (index, value) {
                        $('#' + drop2).append(new Option(value[1], value[0], false, false));
                    });
                } else {
                    /**/
                }
            }, function (data) {

            });
        });
    } catch (e) { ; }
}

function largShowDialog(data) {
    ShowDialog(data, "modal-xl");
}
function ShowDialog(data, mWidth) {

    var h = "<div class='modal fade in' id='portlet-form' tabindex='-1' role='dialog' aria-labelledby='myModalLabel' aria-hidden='false' style='display: block;'>";
    h += "<div class='modal-backdrop fade in'></div><div class='modal-dialog animated bounceInDown " + mWidth + " '><div class='modal-content'><div class='modal-header'><button type='button' class='close' data-dismiss='modal' aria-hidden='true' onclick='$(\"#portlet-form\").hide();'></button>";
    h += "<h4 class='modal-title'>نمایش</h4></div><div class='modal-body' style='max-height:450px;overflow-y:auto'>";
    h += data;
    h += "</div></div></div></div>";
    $("#sectionContents").html(h);
}
function AlertMessage(data) {
    $("#sectionContentsMessage").html(data);
}
function DeleteAll(data) {
    if (data.isSuccess) {
        var table = $('.myTable').DataTable();
        $(".table input[type='checkbox']:checked").each(function (i, item) {
            var row = table.row('#' + item.value).remove().draw();
            //$(item).closest("tr").remove();
        });
        $(".group-checkable").parent().removeClass('checked');
        /*
         $("tbody .active").remove();
        */
        showMessage(data.msg, '', 'success');
    } else {
        showMessage(data.msg, '', 'error');
    }
}
function RemoveRow(data) {
    var table = $('.myTable').DataTable();
    var row = table.row('#' + Tr).remove().draw();
    showMessage(data.errorMsg, '', 'success');
}
function RemoveRowTable(data) {
    if (data.isSuccess == true) {
        var table = $('.myTable').DataTable();
        var row = table.row('#' + data.id).remove().draw();
        showMessage(data.msg, '', 'success');
        $("#portlet-form").hide();
        $("#sectionContents").empty();
    } else {
        showMessage(data.msg, '', 'error');
    }
}
function DeleteRow(model) {
    if (model == "undefined" || model === null) {
        model = "btnDelete";
    }
    if ($("input:checked").length == 0) {
        return;
    }
    bootbox.confirm(initializeculture.areyousureyouwantremoveselecteditem, function (result) {
        if (result) {
            $("#" + model).click();
        } else {
            $(".bootbox").modal("hide");
            $(".bootbox-confirm").hide();

            return false;
        }
    });
}
function Finish(data) {
    switch (data.model) {
        case "ShowAlert":
            showMessage(data.msg, '', 'success');
            $("#sectionContents").empty()
            return;
        case "DeleteRow":
            //$('#' + data.id).remove();
            var table = $('.myTable').DataTable();
            var row = table.row('#' + data.id).remove().draw();
            showMessage(data.msg, '', 'success');
            $("#portlet-form").hide();
            $("#sectionContents").empty();
            return;
        case "add":
            location.reload();
            showMessage(data.msg, '', 'success');
            $("#portlet-form").hide();
            $("#sectionContents").empty();
            return;
        case "redirect":
            location.href = data.url;
            showMessage(data.msg, '', 'success');
            $("#portlet-form").hide();
            $("#sectionContents").empty();
            return;
    }

    var msg = "";

    if (data.msg != undefined)
        msg = data.msg;

    if (data.errorMsg != undefined)
        msg = data.errorMsg;

    if (data.isSuccess) {
        showMessage(msg, '', 'success');
    } else {
        showMessage(msg, '', 'error');
    }
}

function LoginVerify(data) {
    if (data.isSuccess) {
        $(".error-section").html("<div class='alert alert-success'><button class='close' onclick='alertClose(this);' data-close='alert'><i class='ti-close'></i></button><span>" + data.errorMsg + "</span></div>")
        if (data.url != undefined) {
            return window.location = data.url;
        }
    } else {
        $(".error-section").html("<div class='alert alert-danger'><button class='close' onclick='alertClose(this);' data-close='alert'><i class='ti-close'></i></button><span>" + data.errorMsg + "</span></div>")
    }
    hide_loading(".auth-body");
}
function startVerify() {
    show_loading(".auth-body");
}
function alertClose(lthis) {
    $(lthis).parent().remove();
}

function show_loading(tag) {
    $(tag).addClass("relative-loader");
    $(tag).prepend("<div class='backdroploader'><div class='loader'></div></div>");
}
function hide_loading(tag) {
    $(tag).removeClass("relative-loader");
    $(tag + " div.backdroploader").remove();
}

function previewSelectedImage(lthis) {
    var data = $(lthis).attr("src");
    if (data == undefined) {
        data = $(lthis).parent().parent().find("input").val();
    }
    if (data != "") {
        var h = "<div class='modal fade in' id='preview-form' tabindex='-1' role='dialog' aria-labelledby='myModalLabel' aria-hidden='false' style='display: block;'>";
        h += "<div class='modal-backdrop fade in'></div><div class='modal-dialog'><div class='modal-content'><div class='modal-header'><button type='button' class='close' data-dismiss='modal' aria-hidden='true' onclick='$(\"#preview-form\").hide();'></button>";
        h += "<h4 class='modal-title'>Preview</h4></div><div class='modal-body'>";
        h += "<img src='" + data + "' class='img-responsive'/>";
        h += "</div></div></div></div>";
        $("#PreviewsectionContents").html(h);
    }
}
function EditDialog(data) {
    var test = initializeculture.form_title;
    DialogBoxMessage(test, data);
}
function ApprovDialog(data) {
    DialogBoxMessage("تایید درخواست", data);
}
function DisApprovDialog(data) {
    DialogBoxMessage("رد درخواست", data);
}
function DoneDialog(data) {
    DialogBoxMessage("تکمیل فرآیند", data);
}
function EditForm(data) {
    /*If model is valid*/
    switch (data.model) {
        case "InvalidInput":
            ShowToastr(data.msg, '', 'error', 'toast-top-right');
            return;
    }
    /*Model is null*/
    DialogBoxMessage(initializeculture.editform, data);
    try {
        $(".focus").focus();
    } catch (ex) {

    }
    try {
        $('#upDrownPermissionType').click(function () {
            var plugin = $(this);
            var model = $(this).attr('model');
            var id = $(this).val();
            var drop2 = $(this).attr('drop');
            $('#' + drop2).empty();
            var body = { id: id };
            SendObj(model, JSON.stringify(body), function (data) {
                if (data.isSuccess) {
                    $.each(data.drop, function (index, value) {
                        $('#' + drop2).append(new Option(value[1], value[0], false, false));
                    });
                } else {

                }
            }, function (data) {

            });
        });
    } catch (e) {

    }

    (function ($) {
        var $jQval = $.validator,
            adapters,
            data_validation = "unobtrusiveValidation";

        function setValidationValues(options, ruleName, value) {
            options.rules[ruleName] = value;
            if (options.message) {
                options.messages[ruleName] = options.message;
            }
        }

        function splitAndTrim(value) {
            return value.replace(/^\s+|\s+$/g, "").split(/\s*,\s*/g);
        }

        function escapeAttributeValue(value) {
            // As mentioned on http://api.jquery.com/category/selectors/
            return value.replace(/([!"#$%&'()*+,./:;<=>?@\[\\\]^`{|}~])/g, "\\$1");
        }

        function getModelPrefix(fieldName) {
            return fieldName.substr(0, fieldName.lastIndexOf(".") + 1);
        }

        function appendModelPrefix(value, prefix) {
            if (value.indexOf("*.") === 0) {
                value = value.replace("*.", prefix);
            }
            return value;
        }



        function onError(error, inputElement) {  // 'this' is the form element
            var container = $(this).find("[data-valmsg-for='" + escapeAttributeValue(inputElement[0].name) + "']"),
                replaceAttrValue = container.attr("data-valmsg-replace"),
                replace = replaceAttrValue ? $.parseJSON(replaceAttrValue) !== false : null;

            container.removeClass("field-validation-valid").addClass("field-validation-error");
            error.data("unobtrusiveContainer", container);

            if (replace) {
                container.empty();
                error.removeClass("input-validation-error").appendTo(container);
            }
            else {
                error.hide();
            }
        }

        function onErrors(event, validator) {  // 'this' is the form element
            var container = $(this).find("[data-valmsg-summary=true]"),
                list = container.find("ul");

            if (list && list.length && validator.errorList.length) {
                list.empty();
                container.addClass("validation-summary-errors").removeClass("validation-summary-valid");

                $.each(validator.errorList, function () {
                    $("<li />").html(this.message).appendTo(list);
                });
            }
        }

        function onSuccess(error) {  // 'this' is the form element
            var container = error.data("unobtrusiveContainer"),
                replaceAttrValue = container.attr("data-valmsg-replace"),
                replace = replaceAttrValue ? $.parseJSON(replaceAttrValue) : null;

            if (container) {
                container.addClass("field-validation-valid").removeClass("field-validation-error");
                error.removeData("unobtrusiveContainer");

                if (replace) {
                    container.empty();
                }
            }
        }

        function onReset(event) {  // 'this' is the form element
            var $form = $(this),
                key = '__jquery_unobtrusive_validation_form_reset';
            if ($form.data(key)) {
                return;
            }
            // Set a flag that indicates we're currently resetting the form.
            $form.data(key, true);
            try {
                $form.data("validator").resetForm();
            } finally {
                $form.removeData(key);
            }

            $form.find(".validation-summary-errors")
                .addClass("validation-summary-valid")
                .removeClass("validation-summary-errors");
            $form.find(".field-validation-error")
                .addClass("field-validation-valid")
                .removeClass("field-validation-error")
                .removeData("unobtrusiveContainer")
                .find(">*")  // If we were using valmsg-replace, get the underlying error
                .removeData("unobtrusiveContainer");
        }

        function validationInfo(form) {
            var $form = $(form),
                result = $form.data(data_validation),
                onResetProxy = $.proxy(onReset, form),
                defaultOptions = $jQval.unobtrusive.options || {},
                execInContext = function (name, args) {
                    var func = defaultOptions[name];
                    func && $.isFunction(func) && func.apply(form, args);
                }

            if (!result) {
                result = {
                    options: {  // options structure passed to jQuery Validate's validate() method
                        errorClass: defaultOptions.errorClass || "input-validation-error",
                        errorElement: defaultOptions.errorElement || "span",
                        errorPlacement: function () {
                            onError.apply(form, arguments);
                            execInContext("errorPlacement", arguments);
                        },
                        invalidHandler: function () {
                            onErrors.apply(form, arguments);
                            execInContext("invalidHandler", arguments);
                        },
                        messages: {},
                        rules: {},
                        success: function () {
                            onSuccess.apply(form, arguments);
                            execInContext("success", arguments);
                        }
                    },
                    attachValidation: function () {
                        $form
                            .off("reset." + data_validation, onResetProxy)
                            .on("reset." + data_validation, onResetProxy)
                            .validate(this.options);
                    },
                    validate: function () {  // a validation function that is called by unobtrusive Ajax
                        $form.validate();
                        return $form.valid();
                    }
                };
                $form.data(data_validation, result);
            }

            return result;
        }

        $jQval.unobtrusive = {
            adapters: [],

            parseElement: function (element, skipAttach) {
                /// <summary>
                /// Parses a single HTML element for unobtrusive validation attributes.
                /// </summary>
                /// <param name="element" domElement="true">The HTML element to be parsed.</param>
                /// <param name="skipAttach" type="Boolean">[Optional] true to skip attaching the
                /// validation to the form. If parsing just this single element, you should specify true.
                /// If parsing several elements, you should specify false, and manually attach the validation
                /// to the form when you are finished. The default is false.</param>
                var $element = $(element),
                    form = $element.parents("form")[0],
                    valInfo, rules, messages;

                if (!form) {  // Cannot do client-side validation without a form
                    return;
                }

                valInfo = validationInfo(form);
                valInfo.options.rules[element.name] = rules = {};
                valInfo.options.messages[element.name] = messages = {};

                $.each(this.adapters, function () {
                    var prefix = "data-val-" + this.name,
                        message = $element.attr(prefix),
                        paramValues = {};

                    if (message !== undefined) {  // Compare against undefined, because an empty message is legal (and falsy)
                        prefix += "-";

                        $.each(this.params, function () {
                            paramValues[this] = $element.attr(prefix + this);
                        });

                        this.adapt({
                            element: element,
                            form: form,
                            message: message,
                            params: paramValues,
                            rules: rules,
                            messages: messages
                        });
                    }
                });

                $.extend(rules, { "__dummy__": true });

                if (!skipAttach) {
                    valInfo.attachValidation();
                }
            },

            parse: function (selector) {
                /// <summary>
                /// Parses all the HTML elements in the specified selector. It looks for input elements decorated
                /// with the [data-val=true] attribute value and enables validation according to the data-val-*
                /// attribute values.
                /// </summary>
                /// <param name="selector" type="String">Any valid jQuery selector.</param>

                // $forms includes all forms in selector's DOM hierarchy (parent, children and self) that have at least one
                // element with data-val=true
                var $selector = $(selector),
                    $forms = $selector.parents()
                        .addBack()
                        .filter("form")
                        .add($selector.find("form"))
                        .has("[data-val=true]");

                $selector.find("[data-val=true]").each(function () {
                    $jQval.unobtrusive.parseElement(this, true);
                });

                $forms.each(function () {
                    var info = validationInfo(this);
                    if (info) {
                        info.attachValidation();
                    }
                });
            }
        };

        adapters = $jQval.unobtrusive.adapters;

        adapters.add = function (adapterName, params, fn) {
            /// <summary>Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation.</summary>
            /// <param name="adapterName" type="String">The name of the adapter to be added. This matches the name used
            /// in the data-val-nnnn HTML attribute (where nnnn is the adapter name).</param>
            /// <param name="params" type="Array" optional="true">[Optional] An array of parameter names (strings) that will
            /// be extracted from the data-val-nnnn-mmmm HTML attributes (where nnnn is the adapter name, and
            /// mmmm is the parameter name).</param>
            /// <param name="fn" type="Function">The function to call, which adapts the values from the HTML
            /// attributes into jQuery Validate rules and/or messages.</param>
            /// <returns type="jQuery.validator.unobtrusive.adapters" />
            if (!fn) {  // Called with no params, just a function
                fn = params;
                params = [];
            }
            this.push({ name: adapterName, params: params, adapt: fn });
            return this;
        };

        adapters.addBool = function (adapterName, ruleName) {
            /// <summary>Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation, where
            /// the jQuery Validate validation rule has no parameter values.</summary>
            /// <param name="adapterName" type="String">The name of the adapter to be added. This matches the name used
            /// in the data-val-nnnn HTML attribute (where nnnn is the adapter name).</param>
            /// <param name="ruleName" type="String" optional="true">[Optional] The name of the jQuery Validate rule. If not provided, the value
            /// of adapterName will be used instead.</param>
            /// <returns type="jQuery.validator.unobtrusive.adapters" />
            return this.add(adapterName, function (options) {
                setValidationValues(options, ruleName || adapterName, true);
            });
        };

        adapters.addMinMax = function (adapterName, minRuleName, maxRuleName, minMaxRuleName, minAttribute, maxAttribute) {
            /// <summary>Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation, where
            /// the jQuery Validate validation has three potential rules (one for min-only, one for max-only, and
            /// one for min-and-max). The HTML parameters are expected to be named -min and -max.</summary>
            /// <param name="adapterName" type="String">The name of the adapter to be added. This matches the name used
            /// in the data-val-nnnn HTML attribute (where nnnn is the adapter name).</param>
            /// <param name="minRuleName" type="String">The name of the jQuery Validate rule to be used when you only
            /// have a minimum value.</param>
            /// <param name="maxRuleName" type="String">The name of the jQuery Validate rule to be used when you only
            /// have a maximum value.</param>
            /// <param name="minMaxRuleName" type="String">The name of the jQuery Validate rule to be used when you
            /// have both a minimum and maximum value.</param>
            /// <param name="minAttribute" type="String" optional="true">[Optional] The name of the HTML attribute that
            /// contains the minimum value. The default is "min".</param>
            /// <param name="maxAttribute" type="String" optional="true">[Optional] The name of the HTML attribute that
            /// contains the maximum value. The default is "max".</param>
            /// <returns type="jQuery.validator.unobtrusive.adapters" />
            return this.add(adapterName, [minAttribute || "min", maxAttribute || "max"], function (options) {
                var min = options.params.min,
                    max = options.params.max;

                if (min && max) {
                    setValidationValues(options, minMaxRuleName, [min, max]);
                }
                else if (min) {
                    setValidationValues(options, minRuleName, min);
                }
                else if (max) {
                    setValidationValues(options, maxRuleName, max);
                }
            });
        };

        adapters.addSingleVal = function (adapterName, attribute, ruleName) {
            /// <summary>Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation, where
            /// the jQuery Validate validation rule has a single value.</summary>
            /// <param name="adapterName" type="String">The name of the adapter to be added. This matches the name used
            /// in the data-val-nnnn HTML attribute(where nnnn is the adapter name).</param>
            /// <param name="attribute" type="String">[Optional] The name of the HTML attribute that contains the value.
            /// The default is "val".</param>
            /// <param name="ruleName" type="String" optional="true">[Optional] The name of the jQuery Validate rule. If not provided, the value
            /// of adapterName will be used instead.</param>
            /// <returns type="jQuery.validator.unobtrusive.adapters" />
            return this.add(adapterName, [attribute || "val"], function (options) {
                setValidationValues(options, ruleName || adapterName, options.params[attribute]);
            });
        };

        $jQval.addMethod("__dummy__", function (value, element, params) {
            return true;
        });

        $jQval.addMethod("regex", function (value, element, params) {
            var match;
            if (this.optional(element)) {
                return true;
            }

            match = new RegExp(params).exec(value);
            return (match && (match.index === 0) && (match[0].length === value.length));
        });

        $jQval.addMethod("nonalphamin", function (value, element, nonalphamin) {
            var match;
            if (nonalphamin) {
                match = value.match(/\W/g);
                match = match && match.length >= nonalphamin;
            }
            return match;
        });

        if ($jQval.methods.extension) {
            adapters.addSingleVal("accept", "mimtype");
            adapters.addSingleVal("extension", "extension");
        } else {
            // for backward compatibility, when the 'extension' validation method does not exist, such as with versions
            // of JQuery Validation plugin prior to 1.10, we should use the 'accept' method for
            // validating the extension, and ignore mime-type validations as they are not supported.
            adapters.addSingleVal("extension", "extension", "accept");
        }

        adapters.addSingleVal("regex", "pattern");
        adapters.addBool("creditcard").addBool("date").addBool("digits").addBool("email").addBool("number").addBool("url");
        adapters.addMinMax("length", "minlength", "maxlength", "rangelength").addMinMax("range", "min", "max", "range");
        adapters.addMinMax("minlength", "minlength").addMinMax("maxlength", "minlength", "maxlength");
        adapters.add("equalto", ["other"], function (options) {
            var prefix = getModelPrefix(options.element.name),
                other = options.params.other,
                fullOtherName = appendModelPrefix(other, prefix),
                element = $(options.form).find(":input").filter("[name='" + escapeAttributeValue(fullOtherName) + "']")[0];

            setValidationValues(options, "equalTo", element);
        });
        adapters.add("required", function (options) {
            // jQuery Validate equates "required" with "mandatory" for checkbox elements
            if (options.element.tagName.toUpperCase() !== "INPUT" || options.element.type.toUpperCase() !== "CHECKBOX") {
                setValidationValues(options, "required", true);
            }
        });
        adapters.add("remote", ["url", "type", "additionalfields"], function (options) {
            var value = {
                url: options.params.url,
                type: options.params.type || "GET",
                data: {}
            },
                prefix = getModelPrefix(options.element.name);

            $.each(splitAndTrim(options.params.additionalfields || options.element.name), function (i, fieldName) {
                var paramName = appendModelPrefix(fieldName, prefix);
                value.data[paramName] = function () {
                    var field = $(options.form).find(":input").filter("[name='" + escapeAttributeValue(paramName) + "']");
                    // For checkboxes and radio buttons, only pick up values from checked fields.
                    if (field.is(":checkbox")) {
                        return field.filter(":checked").val() || field.filter(":hidden").val() || '';
                    }
                    else if (field.is(":radio")) {
                        return field.filter(":checked").val() || '';
                    }
                    return field.val();
                };
            });

            setValidationValues(options, "remote", value);
        });
        adapters.add("password", ["min", "nonalphamin", "regex"], function (options) {
            if (options.params.min) {
                setValidationValues(options, "minlength", options.params.min);
            }
            if (options.params.nonalphamin) {
                setValidationValues(options, "nonalphamin", options.params.nonalphamin);
            }
            if (options.params.regex) {
                setValidationValues(options, "regex", options.params.regex);
            }
        });

        $(function () {
            $jQval.unobtrusive.parse(document);
        });
    }(jQuery));
}

function CancelForm(data) {
    /*If model is valid*/
    switch (data.model) {
        case "InvalidInput":
            ShowToastr(data.msg, '', 'error', 'toast-top-right');
            return;
    }
    /*Model is null*/
    DialogBoxMessage("لغو(انصراف بعد از صدور) مجوز صادر شده", data);
    try {
        $(".focus").focus();
    } catch (ex) {

    }
    try {
        $('#upDrownPermissionType').click(function () {
            var plugin = $(this);
            var model = $(this).attr('model');
            var id = $(this).val();
            var drop2 = $(this).attr('drop');
            $('#' + drop2).empty();
            var body = { id: id };
            SendObj(model, JSON.stringify(body), function (data) {
                if (data.isSuccess) {
                    $.each(data.drop, function (index, value) {
                        $('#' + drop2).append(new Option(value[1], value[0], false, false));
                    });
                } else {

                }
            }, function (data) {

            });
        });
    } catch (e) {

    }

    (function ($) {
        var $jQval = $.validator,
            adapters,
            data_validation = "unobtrusiveValidation";

        function setValidationValues(options, ruleName, value) {
            options.rules[ruleName] = value;
            if (options.message) {
                options.messages[ruleName] = options.message;
            }
        }

        function splitAndTrim(value) {
            return value.replace(/^\s+|\s+$/g, "").split(/\s*,\s*/g);
        }

        function escapeAttributeValue(value) {
            // As mentioned on http://api.jquery.com/category/selectors/
            return value.replace(/([!"#$%&'()*+,./:;<=>?@\[\\\]^`{|}~])/g, "\\$1");
        }

        function getModelPrefix(fieldName) {
            return fieldName.substr(0, fieldName.lastIndexOf(".") + 1);
        }

        function appendModelPrefix(value, prefix) {
            if (value.indexOf("*.") === 0) {
                value = value.replace("*.", prefix);
            }
            return value;
        }



        function onError(error, inputElement) {  // 'this' is the form element
            var container = $(this).find("[data-valmsg-for='" + escapeAttributeValue(inputElement[0].name) + "']"),
                replaceAttrValue = container.attr("data-valmsg-replace"),
                replace = replaceAttrValue ? $.parseJSON(replaceAttrValue) !== false : null;

            container.removeClass("field-validation-valid").addClass("field-validation-error");
            error.data("unobtrusiveContainer", container);

            if (replace) {
                container.empty();
                error.removeClass("input-validation-error").appendTo(container);
            }
            else {
                error.hide();
            }
        }

        function onErrors(event, validator) {  // 'this' is the form element
            var container = $(this).find("[data-valmsg-summary=true]"),
                list = container.find("ul");

            if (list && list.length && validator.errorList.length) {
                list.empty();
                container.addClass("validation-summary-errors").removeClass("validation-summary-valid");

                $.each(validator.errorList, function () {
                    $("<li />").html(this.message).appendTo(list);
                });
            }
        }

        function onSuccess(error) {  // 'this' is the form element
            var container = error.data("unobtrusiveContainer"),
                replaceAttrValue = container.attr("data-valmsg-replace"),
                replace = replaceAttrValue ? $.parseJSON(replaceAttrValue) : null;

            if (container) {
                container.addClass("field-validation-valid").removeClass("field-validation-error");
                error.removeData("unobtrusiveContainer");

                if (replace) {
                    container.empty();
                }
            }
        }

        function onReset(event) {  // 'this' is the form element
            var $form = $(this),
                key = '__jquery_unobtrusive_validation_form_reset';
            if ($form.data(key)) {
                return;
            }
            // Set a flag that indicates we're currently resetting the form.
            $form.data(key, true);
            try {
                $form.data("validator").resetForm();
            } finally {
                $form.removeData(key);
            }

            $form.find(".validation-summary-errors")
                .addClass("validation-summary-valid")
                .removeClass("validation-summary-errors");
            $form.find(".field-validation-error")
                .addClass("field-validation-valid")
                .removeClass("field-validation-error")
                .removeData("unobtrusiveContainer")
                .find(">*")  // If we were using valmsg-replace, get the underlying error
                .removeData("unobtrusiveContainer");
        }

        function validationInfo(form) {
            var $form = $(form),
                result = $form.data(data_validation),
                onResetProxy = $.proxy(onReset, form),
                defaultOptions = $jQval.unobtrusive.options || {},
                execInContext = function (name, args) {
                    var func = defaultOptions[name];
                    func && $.isFunction(func) && func.apply(form, args);
                }

            if (!result) {
                result = {
                    options: {  // options structure passed to jQuery Validate's validate() method
                        errorClass: defaultOptions.errorClass || "input-validation-error",
                        errorElement: defaultOptions.errorElement || "span",
                        errorPlacement: function () {
                            onError.apply(form, arguments);
                            execInContext("errorPlacement", arguments);
                        },
                        invalidHandler: function () {
                            onErrors.apply(form, arguments);
                            execInContext("invalidHandler", arguments);
                        },
                        messages: {},
                        rules: {},
                        success: function () {
                            onSuccess.apply(form, arguments);
                            execInContext("success", arguments);
                        }
                    },
                    attachValidation: function () {
                        $form
                            .off("reset." + data_validation, onResetProxy)
                            .on("reset." + data_validation, onResetProxy)
                            .validate(this.options);
                    },
                    validate: function () {  // a validation function that is called by unobtrusive Ajax
                        $form.validate();
                        return $form.valid();
                    }
                };
                $form.data(data_validation, result);
            }

            return result;
        }

        $jQval.unobtrusive = {
            adapters: [],

            parseElement: function (element, skipAttach) {
                /// <summary>
                /// Parses a single HTML element for unobtrusive validation attributes.
                /// </summary>
                /// <param name="element" domElement="true">The HTML element to be parsed.</param>
                /// <param name="skipAttach" type="Boolean">[Optional] true to skip attaching the
                /// validation to the form. If parsing just this single element, you should specify true.
                /// If parsing several elements, you should specify false, and manually attach the validation
                /// to the form when you are finished. The default is false.</param>
                var $element = $(element),
                    form = $element.parents("form")[0],
                    valInfo, rules, messages;

                if (!form) {  // Cannot do client-side validation without a form
                    return;
                }

                valInfo = validationInfo(form);
                valInfo.options.rules[element.name] = rules = {};
                valInfo.options.messages[element.name] = messages = {};

                $.each(this.adapters, function () {
                    var prefix = "data-val-" + this.name,
                        message = $element.attr(prefix),
                        paramValues = {};

                    if (message !== undefined) {  // Compare against undefined, because an empty message is legal (and falsy)
                        prefix += "-";

                        $.each(this.params, function () {
                            paramValues[this] = $element.attr(prefix + this);
                        });

                        this.adapt({
                            element: element,
                            form: form,
                            message: message,
                            params: paramValues,
                            rules: rules,
                            messages: messages
                        });
                    }
                });

                $.extend(rules, { "__dummy__": true });

                if (!skipAttach) {
                    valInfo.attachValidation();
                }
            },

            parse: function (selector) {
                /// <summary>
                /// Parses all the HTML elements in the specified selector. It looks for input elements decorated
                /// with the [data-val=true] attribute value and enables validation according to the data-val-*
                /// attribute values.
                /// </summary>
                /// <param name="selector" type="String">Any valid jQuery selector.</param>

                // $forms includes all forms in selector's DOM hierarchy (parent, children and self) that have at least one
                // element with data-val=true
                var $selector = $(selector),
                    $forms = $selector.parents()
                        .addBack()
                        .filter("form")
                        .add($selector.find("form"))
                        .has("[data-val=true]");

                $selector.find("[data-val=true]").each(function () {
                    $jQval.unobtrusive.parseElement(this, true);
                });

                $forms.each(function () {
                    var info = validationInfo(this);
                    if (info) {
                        info.attachValidation();
                    }
                });
            }
        };

        adapters = $jQval.unobtrusive.adapters;

        adapters.add = function (adapterName, params, fn) {
            /// <summary>Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation.</summary>
            /// <param name="adapterName" type="String">The name of the adapter to be added. This matches the name used
            /// in the data-val-nnnn HTML attribute (where nnnn is the adapter name).</param>
            /// <param name="params" type="Array" optional="true">[Optional] An array of parameter names (strings) that will
            /// be extracted from the data-val-nnnn-mmmm HTML attributes (where nnnn is the adapter name, and
            /// mmmm is the parameter name).</param>
            /// <param name="fn" type="Function">The function to call, which adapts the values from the HTML
            /// attributes into jQuery Validate rules and/or messages.</param>
            /// <returns type="jQuery.validator.unobtrusive.adapters" />
            if (!fn) {  // Called with no params, just a function
                fn = params;
                params = [];
            }
            this.push({ name: adapterName, params: params, adapt: fn });
            return this;
        };

        adapters.addBool = function (adapterName, ruleName) {
            /// <summary>Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation, where
            /// the jQuery Validate validation rule has no parameter values.</summary>
            /// <param name="adapterName" type="String">The name of the adapter to be added. This matches the name used
            /// in the data-val-nnnn HTML attribute (where nnnn is the adapter name).</param>
            /// <param name="ruleName" type="String" optional="true">[Optional] The name of the jQuery Validate rule. If not provided, the value
            /// of adapterName will be used instead.</param>
            /// <returns type="jQuery.validator.unobtrusive.adapters" />
            return this.add(adapterName, function (options) {
                setValidationValues(options, ruleName || adapterName, true);
            });
        };

        adapters.addMinMax = function (adapterName, minRuleName, maxRuleName, minMaxRuleName, minAttribute, maxAttribute) {
            /// <summary>Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation, where
            /// the jQuery Validate validation has three potential rules (one for min-only, one for max-only, and
            /// one for min-and-max). The HTML parameters are expected to be named -min and -max.</summary>
            /// <param name="adapterName" type="String">The name of the adapter to be added. This matches the name used
            /// in the data-val-nnnn HTML attribute (where nnnn is the adapter name).</param>
            /// <param name="minRuleName" type="String">The name of the jQuery Validate rule to be used when you only
            /// have a minimum value.</param>
            /// <param name="maxRuleName" type="String">The name of the jQuery Validate rule to be used when you only
            /// have a maximum value.</param>
            /// <param name="minMaxRuleName" type="String">The name of the jQuery Validate rule to be used when you
            /// have both a minimum and maximum value.</param>
            /// <param name="minAttribute" type="String" optional="true">[Optional] The name of the HTML attribute that
            /// contains the minimum value. The default is "min".</param>
            /// <param name="maxAttribute" type="String" optional="true">[Optional] The name of the HTML attribute that
            /// contains the maximum value. The default is "max".</param>
            /// <returns type="jQuery.validator.unobtrusive.adapters" />
            return this.add(adapterName, [minAttribute || "min", maxAttribute || "max"], function (options) {
                var min = options.params.min,
                    max = options.params.max;

                if (min && max) {
                    setValidationValues(options, minMaxRuleName, [min, max]);
                }
                else if (min) {
                    setValidationValues(options, minRuleName, min);
                }
                else if (max) {
                    setValidationValues(options, maxRuleName, max);
                }
            });
        };

        adapters.addSingleVal = function (adapterName, attribute, ruleName) {
            /// <summary>Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation, where
            /// the jQuery Validate validation rule has a single value.</summary>
            /// <param name="adapterName" type="String">The name of the adapter to be added. This matches the name used
            /// in the data-val-nnnn HTML attribute(where nnnn is the adapter name).</param>
            /// <param name="attribute" type="String">[Optional] The name of the HTML attribute that contains the value.
            /// The default is "val".</param>
            /// <param name="ruleName" type="String" optional="true">[Optional] The name of the jQuery Validate rule. If not provided, the value
            /// of adapterName will be used instead.</param>
            /// <returns type="jQuery.validator.unobtrusive.adapters" />
            return this.add(adapterName, [attribute || "val"], function (options) {
                setValidationValues(options, ruleName || adapterName, options.params[attribute]);
            });
        };

        $jQval.addMethod("__dummy__", function (value, element, params) {
            return true;
        });

        $jQval.addMethod("regex", function (value, element, params) {
            var match;
            if (this.optional(element)) {
                return true;
            }

            match = new RegExp(params).exec(value);
            return (match && (match.index === 0) && (match[0].length === value.length));
        });

        $jQval.addMethod("nonalphamin", function (value, element, nonalphamin) {
            var match;
            if (nonalphamin) {
                match = value.match(/\W/g);
                match = match && match.length >= nonalphamin;
            }
            return match;
        });

        if ($jQval.methods.extension) {
            adapters.addSingleVal("accept", "mimtype");
            adapters.addSingleVal("extension", "extension");
        } else {
            // for backward compatibility, when the 'extension' validation method does not exist, such as with versions
            // of JQuery Validation plugin prior to 1.10, we should use the 'accept' method for
            // validating the extension, and ignore mime-type validations as they are not supported.
            adapters.addSingleVal("extension", "extension", "accept");
        }

        adapters.addSingleVal("regex", "pattern");
        adapters.addBool("creditcard").addBool("date").addBool("digits").addBool("email").addBool("number").addBool("url");
        adapters.addMinMax("length", "minlength", "maxlength", "rangelength").addMinMax("range", "min", "max", "range");
        adapters.addMinMax("minlength", "minlength").addMinMax("maxlength", "minlength", "maxlength");
        adapters.add("equalto", ["other"], function (options) {
            var prefix = getModelPrefix(options.element.name),
                other = options.params.other,
                fullOtherName = appendModelPrefix(other, prefix),
                element = $(options.form).find(":input").filter("[name='" + escapeAttributeValue(fullOtherName) + "']")[0];

            setValidationValues(options, "equalTo", element);
        });
        adapters.add("required", function (options) {
            // jQuery Validate equates "required" with "mandatory" for checkbox elements
            if (options.element.tagName.toUpperCase() !== "INPUT" || options.element.type.toUpperCase() !== "CHECKBOX") {
                setValidationValues(options, "required", true);
            }
        });
        adapters.add("remote", ["url", "type", "additionalfields"], function (options) {
            var value = {
                url: options.params.url,
                type: options.params.type || "GET",
                data: {}
            },
                prefix = getModelPrefix(options.element.name);

            $.each(splitAndTrim(options.params.additionalfields || options.element.name), function (i, fieldName) {
                var paramName = appendModelPrefix(fieldName, prefix);
                value.data[paramName] = function () {
                    var field = $(options.form).find(":input").filter("[name='" + escapeAttributeValue(paramName) + "']");
                    // For checkboxes and radio buttons, only pick up values from checked fields.
                    if (field.is(":checkbox")) {
                        return field.filter(":checked").val() || field.filter(":hidden").val() || '';
                    }
                    else if (field.is(":radio")) {
                        return field.filter(":checked").val() || '';
                    }
                    return field.val();
                };
            });

            setValidationValues(options, "remote", value);
        });
        adapters.add("password", ["min", "nonalphamin", "regex"], function (options) {
            if (options.params.min) {
                setValidationValues(options, "minlength", options.params.min);
            }
            if (options.params.nonalphamin) {
                setValidationValues(options, "nonalphamin", options.params.nonalphamin);
            }
            if (options.params.regex) {
                setValidationValues(options, "regex", options.params.regex);
            }
        });

        $(function () {
            $jQval.unobtrusive.parse(document);
        });
    }(jQuery));
}

function RevokeForm(data) {
    /*If model is valid*/
    switch (data.model) {
        case "InvalidInput":
            ShowToastr(data.msg, '', 'error', 'toast-top-right');
            return;
    }
    /*Model is null*/
    DialogBoxMessage("ابطال مجوز صادر شده", data);
    try {
        $(".focus").focus();
    } catch (ex) {

    }
    try {
        $('#upDrownPermissionType').click(function () {
            var plugin = $(this);
            var model = $(this).attr('model');
            var id = $(this).val();
            var drop2 = $(this).attr('drop');
            $('#' + drop2).empty();
            var body = { id: id };
            SendObj(model, JSON.stringify(body), function (data) {
                if (data.isSuccess) {
                    $.each(data.drop, function (index, value) {
                        $('#' + drop2).append(new Option(value[1], value[0], false, false));
                    });
                } else {

                }
            }, function (data) {

            });
        });
    } catch (e) {

    }

    (function ($) {
        var $jQval = $.validator,
            adapters,
            data_validation = "unobtrusiveValidation";

        function setValidationValues(options, ruleName, value) {
            options.rules[ruleName] = value;
            if (options.message) {
                options.messages[ruleName] = options.message;
            }
        }

        function splitAndTrim(value) {
            return value.replace(/^\s+|\s+$/g, "").split(/\s*,\s*/g);
        }

        function escapeAttributeValue(value) {
            // As mentioned on http://api.jquery.com/category/selectors/
            return value.replace(/([!"#$%&'()*+,./:;<=>?@\[\\\]^`{|}~])/g, "\\$1");
        }

        function getModelPrefix(fieldName) {
            return fieldName.substr(0, fieldName.lastIndexOf(".") + 1);
        }

        function appendModelPrefix(value, prefix) {
            if (value.indexOf("*.") === 0) {
                value = value.replace("*.", prefix);
            }
            return value;
        }



        function onError(error, inputElement) {  // 'this' is the form element
            var container = $(this).find("[data-valmsg-for='" + escapeAttributeValue(inputElement[0].name) + "']"),
                replaceAttrValue = container.attr("data-valmsg-replace"),
                replace = replaceAttrValue ? $.parseJSON(replaceAttrValue) !== false : null;

            container.removeClass("field-validation-valid").addClass("field-validation-error");
            error.data("unobtrusiveContainer", container);

            if (replace) {
                container.empty();
                error.removeClass("input-validation-error").appendTo(container);
            }
            else {
                error.hide();
            }
        }

        function onErrors(event, validator) {  // 'this' is the form element
            var container = $(this).find("[data-valmsg-summary=true]"),
                list = container.find("ul");

            if (list && list.length && validator.errorList.length) {
                list.empty();
                container.addClass("validation-summary-errors").removeClass("validation-summary-valid");

                $.each(validator.errorList, function () {
                    $("<li />").html(this.message).appendTo(list);
                });
            }
        }

        function onSuccess(error) {  // 'this' is the form element
            var container = error.data("unobtrusiveContainer"),
                replaceAttrValue = container.attr("data-valmsg-replace"),
                replace = replaceAttrValue ? $.parseJSON(replaceAttrValue) : null;

            if (container) {
                container.addClass("field-validation-valid").removeClass("field-validation-error");
                error.removeData("unobtrusiveContainer");

                if (replace) {
                    container.empty();
                }
            }
        }

        function onReset(event) {  // 'this' is the form element
            var $form = $(this),
                key = '__jquery_unobtrusive_validation_form_reset';
            if ($form.data(key)) {
                return;
            }
            // Set a flag that indicates we're currently resetting the form.
            $form.data(key, true);
            try {
                $form.data("validator").resetForm();
            } finally {
                $form.removeData(key);
            }

            $form.find(".validation-summary-errors")
                .addClass("validation-summary-valid")
                .removeClass("validation-summary-errors");
            $form.find(".field-validation-error")
                .addClass("field-validation-valid")
                .removeClass("field-validation-error")
                .removeData("unobtrusiveContainer")
                .find(">*")
                .removeData("unobtrusiveContainer");
        }

        function validationInfo(form) {
            var $form = $(form),
                result = $form.data(data_validation),
                onResetProxy = $.proxy(onReset, form),
                defaultOptions = $jQval.unobtrusive.options || {},
                execInContext = function (name, args) {
                    var func = defaultOptions[name];
                    func && $.isFunction(func) && func.apply(form, args);
                }

            if (!result) {
                result = {
                    options: {  // options structure passed to jQuery Validate's validate() method
                        errorClass: defaultOptions.errorClass || "input-validation-error",
                        errorElement: defaultOptions.errorElement || "span",
                        errorPlacement: function () {
                            onError.apply(form, arguments);
                            execInContext("errorPlacement", arguments);
                        },
                        invalidHandler: function () {
                            onErrors.apply(form, arguments);
                            execInContext("invalidHandler", arguments);
                        },
                        messages: {},
                        rules: {},
                        success: function () {
                            onSuccess.apply(form, arguments);
                            execInContext("success", arguments);
                        }
                    },
                    attachValidation: function () {
                        $form
                            .off("reset." + data_validation, onResetProxy)
                            .on("reset." + data_validation, onResetProxy)
                            .validate(this.options);
                    },
                    validate: function () {  // a validation function that is called by unobtrusive Ajax
                        $form.validate();
                        return $form.valid();
                    }
                };
                $form.data(data_validation, result);
            }

            return result;
        }

        $jQval.unobtrusive = {
            adapters: [],

            parseElement: function (element, skipAttach) {
                var $element = $(element),
                    form = $element.parents("form")[0],
                    valInfo, rules, messages;

                if (!form) {  // Cannot do client-side validation without a form
                    return;
                }

                valInfo = validationInfo(form);
                valInfo.options.rules[element.name] = rules = {};
                valInfo.options.messages[element.name] = messages = {};

                $.each(this.adapters, function () {
                    var prefix = "data-val-" + this.name,
                        message = $element.attr(prefix),
                        paramValues = {};

                    if (message !== undefined) {  // Compare against undefined, because an empty message is legal (and falsy)
                        prefix += "-";

                        $.each(this.params, function () {
                            paramValues[this] = $element.attr(prefix + this);
                        });

                        this.adapt({
                            element: element,
                            form: form,
                            message: message,
                            params: paramValues,
                            rules: rules,
                            messages: messages
                        });
                    }
                });

                $.extend(rules, { "__dummy__": true });

                if (!skipAttach) {
                    valInfo.attachValidation();
                }
            },

            parse: function (selector) {
                var $selector = $(selector),
                    $forms = $selector.parents()
                        .addBack()
                        .filter("form")
                        .add($selector.find("form"))
                        .has("[data-val=true]");

                $selector.find("[data-val=true]").each(function () {
                    $jQval.unobtrusive.parseElement(this, true);
                });

                $forms.each(function () {
                    var info = validationInfo(this);
                    if (info) {
                        info.attachValidation();
                    }
                });
            }
        };

        adapters = $jQval.unobtrusive.adapters;

        adapters.add = function (adapterName, params, fn) {
            if (!fn) {  // Called with no params, just a function
                fn = params;
                params = [];
            }
            this.push({ name: adapterName, params: params, adapt: fn });
            return this;
        };

        adapters.addBool = function (adapterName, ruleName) {
            return this.add(adapterName, function (options) {
                setValidationValues(options, ruleName || adapterName, true);
            });
        };

        adapters.addMinMax = function (adapterName, minRuleName, maxRuleName, minMaxRuleName, minAttribute, maxAttribute) {
            return this.add(adapterName, [minAttribute || "min", maxAttribute || "max"], function (options) {
                var min = options.params.min,
                    max = options.params.max;

                if (min && max) {
                    setValidationValues(options, minMaxRuleName, [min, max]);
                }
                else if (min) {
                    setValidationValues(options, minRuleName, min);
                }
                else if (max) {
                    setValidationValues(options, maxRuleName, max);
                }
            });
        };

        adapters.addSingleVal = function (adapterName, attribute, ruleName) {
            /// <summary>Adds a new adapter to convert unobtrusive HTML into a jQuery Validate validation, where
            /// the jQuery Validate validation rule has a single value.</summary>
            /// <param name="adapterName" type="String">The name of the adapter to be added. This matches the name used
            /// in the data-val-nnnn HTML attribute(where nnnn is the adapter name).</param>
            /// <param name="attribute" type="String">[Optional] The name of the HTML attribute that contains the value.
            /// The default is "val".</param>
            /// <param name="ruleName" type="String" optional="true">[Optional] The name of the jQuery Validate rule. If not provided, the value
            /// of adapterName will be used instead.</param>
            /// <returns type="jQuery.validator.unobtrusive.adapters" />
            return this.add(adapterName, [attribute || "val"], function (options) {
                setValidationValues(options, ruleName || adapterName, options.params[attribute]);
            });
        };

        $jQval.addMethod("__dummy__", function (value, element, params) {
            return true;
        });

        $jQval.addMethod("regex", function (value, element, params) {
            var match;
            if (this.optional(element)) {
                return true;
            }

            match = new RegExp(params).exec(value);
            return (match && (match.index === 0) && (match[0].length === value.length));
        });

        $jQval.addMethod("nonalphamin", function (value, element, nonalphamin) {
            var match;
            if (nonalphamin) {
                match = value.match(/\W/g);
                match = match && match.length >= nonalphamin;
            }
            return match;
        });

        if ($jQval.methods.extension) {
            adapters.addSingleVal("accept", "mimtype");
            adapters.addSingleVal("extension", "extension");
        } else {
            // for backward compatibility, when the 'extension' validation method does not exist, such as with versions
            // of JQuery Validation plugin prior to 1.10, we should use the 'accept' method for
            // validating the extension, and ignore mime-type validations as they are not supported.
            adapters.addSingleVal("extension", "extension", "accept");
        }

        adapters.addSingleVal("regex", "pattern");
        adapters.addBool("creditcard").addBool("date").addBool("digits").addBool("email").addBool("number").addBool("url");
        adapters.addMinMax("length", "minlength", "maxlength", "rangelength").addMinMax("range", "min", "max", "range");
        adapters.addMinMax("minlength", "minlength").addMinMax("maxlength", "minlength", "maxlength");
        adapters.add("equalto", ["other"], function (options) {
            var prefix = getModelPrefix(options.element.name),
                other = options.params.other,
                fullOtherName = appendModelPrefix(other, prefix),
                element = $(options.form).find(":input").filter("[name='" + escapeAttributeValue(fullOtherName) + "']")[0];

            setValidationValues(options, "equalTo", element);
        });
        adapters.add("required", function (options) {
            // jQuery Validate equates "required" with "mandatory" for checkbox elements
            if (options.element.tagName.toUpperCase() !== "INPUT" || options.element.type.toUpperCase() !== "CHECKBOX") {
                setValidationValues(options, "required", true);
            }
        });
        adapters.add("remote", ["url", "type", "additionalfields"], function (options) {
            var value = {
                url: options.params.url,
                type: options.params.type || "GET",
                data: {}
            },
                prefix = getModelPrefix(options.element.name);

            $.each(splitAndTrim(options.params.additionalfields || options.element.name), function (i, fieldName) {
                var paramName = appendModelPrefix(fieldName, prefix);
                value.data[paramName] = function () {
                    var field = $(options.form).find(":input").filter("[name='" + escapeAttributeValue(paramName) + "']");
                    // For checkboxes and radio buttons, only pick up values from checked fields.
                    if (field.is(":checkbox")) {
                        return field.filter(":checked").val() || field.filter(":hidden").val() || '';
                    }
                    else if (field.is(":radio")) {
                        return field.filter(":checked").val() || '';
                    }
                    return field.val();
                };
            });

            setValidationValues(options, "remote", value);
        });
        adapters.add("password", ["min", "nonalphamin", "regex"], function (options) {
            if (options.params.min) {
                setValidationValues(options, "minlength", options.params.min);
            }
            if (options.params.nonalphamin) {
                setValidationValues(options, "nonalphamin", options.params.nonalphamin);
            }
            if (options.params.regex) {
                setValidationValues(options, "regex", options.params.regex);
            }
        });

        $(function () {
            $jQval.unobtrusive.parse(document);
        });
    }(jQuery));
}


function ModifyStatusForm(data) {
    /*If model is valid*/
    switch (data.model) {
        case "InvalidInput":
            ShowToastr(data.msg, '', 'error', 'toast-top-right');
            return;
    }
    /*Model is null*/
    DialogBoxMessage("تغیر وضعیت درخواست", data);
    try {
        $(".focus").focus();
    } catch (ex) {

    }
    try {
        $('#upDrownPermissionType').click(function () {
            var plugin = $(this);
            var model = $(this).attr('model');
            var id = $(this).val();
            var drop2 = $(this).attr('drop');
            $('#' + drop2).empty();
            var body = { id: id };
            SendObj(model, JSON.stringify(body), function (data) {
                if (data.isSuccess) {
                    $.each(data.drop, function (index, value) {
                        $('#' + drop2).append(new Option(value[1], value[0], false, false));
                    });
                } else {

                }
            }, function (data) {

            });
        });
    } catch (e) {

    }

    (function ($) {
        var $jQval = $.validator,
            adapters,
            data_validation = "unobtrusiveValidation";

        function setValidationValues(options, ruleName, value) {
            options.rules[ruleName] = value;
            if (options.message) {
                options.messages[ruleName] = options.message;
            }
        }

        function splitAndTrim(value) {
            return value.replace(/^\s+|\s+$/g, "").split(/\s*,\s*/g);
        }

        function escapeAttributeValue(value) {
            // As mentioned on http://api.jquery.com/category/selectors/
            return value.replace(/([!"#$%&'()*+,./:;<=>?@\[\\\]^`{|}~])/g, "\\$1");
        }

        function getModelPrefix(fieldName) {
            return fieldName.substr(0, fieldName.lastIndexOf(".") + 1);
        }

        function appendModelPrefix(value, prefix) {
            if (value.indexOf("*.") === 0) {
                value = value.replace("*.", prefix);
            }
            return value;
        }



        function onError(error, inputElement) {  // 'this' is the form element
            var container = $(this).find("[data-valmsg-for='" + escapeAttributeValue(inputElement[0].name) + "']"),
                replaceAttrValue = container.attr("data-valmsg-replace"),
                replace = replaceAttrValue ? $.parseJSON(replaceAttrValue) !== false : null;

            container.removeClass("field-validation-valid").addClass("field-validation-error");
            error.data("unobtrusiveContainer", container);

            if (replace) {
                container.empty();
                error.removeClass("input-validation-error").appendTo(container);
            }
            else {
                error.hide();
            }
        }

        function onErrors(event, validator) {  // 'this' is the form element
            var container = $(this).find("[data-valmsg-summary=true]"),
                list = container.find("ul");

            if (list && list.length && validator.errorList.length) {
                list.empty();
                container.addClass("validation-summary-errors").removeClass("validation-summary-valid");

                $.each(validator.errorList, function () {
                    $("<li />").html(this.message).appendTo(list);
                });
            }
        }

        function onSuccess(error) {  // 'this' is the form element
            var container = error.data("unobtrusiveContainer"),
                replaceAttrValue = container.attr("data-valmsg-replace"),
                replace = replaceAttrValue ? $.parseJSON(replaceAttrValue) : null;

            if (container) {
                container.addClass("field-validation-valid").removeClass("field-validation-error");
                error.removeData("unobtrusiveContainer");

                if (replace) {
                    container.empty();
                }
            }
        }

        function onReset(event) {  // 'this' is the form element
            var $form = $(this),
                key = '__jquery_unobtrusive_validation_form_reset';
            if ($form.data(key)) {
                return;
            }
            // Set a flag that indicates we're currently resetting the form.
            $form.data(key, true);
            try {
                $form.data("validator").resetForm();
            } finally {
                $form.removeData(key);
            }

            $form.find(".validation-summary-errors")
                .addClass("validation-summary-valid")
                .removeClass("validation-summary-errors");
            $form.find(".field-validation-error")
                .addClass("field-validation-valid")
                .removeClass("field-validation-error")
                .removeData("unobtrusiveContainer")
                .find(">*")
                .removeData("unobtrusiveContainer");
        }

        function validationInfo(form) {
            var $form = $(form),
                result = $form.data(data_validation),
                onResetProxy = $.proxy(onReset, form),
                defaultOptions = $jQval.unobtrusive.options || {},
                execInContext = function (name, args) {
                    var func = defaultOptions[name];
                    func && $.isFunction(func) && func.apply(form, args);
                }

            if (!result) {
                result = {
                    options: {  // options structure passed to jQuery Validate's validate() method
                        errorClass: defaultOptions.errorClass || "input-validation-error",
                        errorElement: defaultOptions.errorElement || "span",
                        errorPlacement: function () {
                            onError.apply(form, arguments);
                            execInContext("errorPlacement", arguments);
                        },
                        invalidHandler: function () {
                            onErrors.apply(form, arguments);
                            execInContext("invalidHandler", arguments);
                        },
                        messages: {},
                        rules: {},
                        success: function () {
                            onSuccess.apply(form, arguments);
                            execInContext("success", arguments);
                        }
                    },
                    attachValidation: function () {
                        $form
                            .off("reset." + data_validation, onResetProxy)
                            .on("reset." + data_validation, onResetProxy)
                            .validate(this.options);
                    },
                    validate: function () {  // a validation function that is called by unobtrusive Ajax
                        $form.validate();
                        return $form.valid();
                    }
                };
                $form.data(data_validation, result);
            }

            return result;
        }

        $jQval.unobtrusive = {
            adapters: [],

            parseElement: function (element, skipAttach) {
                var $element = $(element),
                    form = $element.parents("form")[0],
                    valInfo, rules, messages;

                if (!form) {  // Cannot do client-side validation without a form
                    return;
                }

                valInfo = validationInfo(form);
                valInfo.options.rules[element.name] = rules = {};
                valInfo.options.messages[element.name] = messages = {};

                $.each(this.adapters, function () {
                    var prefix = "data-val-" + this.name,
                        message = $element.attr(prefix),
                        paramValues = {};

                    if (message !== undefined) {  // Compare against undefined, because an empty message is legal (and falsy)
                        prefix += "-";

                        $.each(this.params, function () {
                            paramValues[this] = $element.attr(prefix + this);
                        });

                        this.adapt({
                            element: element,
                            form: form,
                            message: message,
                            params: paramValues,
                            rules: rules,
                            messages: messages
                        });
                    }
                });

                $.extend(rules, { "__dummy__": true });

                if (!skipAttach) {
                    valInfo.attachValidation();
                }
            },

            parse: function (selector) {
                var $selector = $(selector),
                    $forms = $selector.parents()
                        .addBack()
                        .filter("form")
                        .add($selector.find("form"))
                        .has("[data-val=true]");

                $selector.find("[data-val=true]").each(function () {
                    $jQval.unobtrusive.parseElement(this, true);
                });

                $forms.each(function () {
                    var info = validationInfo(this);
                    if (info) {
                        info.attachValidation();
                    }
                });
            }
        };

        adapters = $jQval.unobtrusive.adapters;

        adapters.add = function (adapterName, params, fn) {
            if (!fn) {  // Called with no params, just a function
                fn = params;
                params = [];
            }
            this.push({ name: adapterName, params: params, adapt: fn });
            return this;
        };

        adapters.addBool = function (adapterName, ruleName) {
            return this.add(adapterName, function (options) {
                setValidationValues(options, ruleName || adapterName, true);
            });
        };

        adapters.addMinMax = function (adapterName, minRuleName, maxRuleName, minMaxRuleName, minAttribute, maxAttribute) {
            return this.add(adapterName, [minAttribute || "min", maxAttribute || "max"], function (options) {
                var min = options.params.min,
                    max = options.params.max;

                if (min && max) {
                    setValidationValues(options, minMaxRuleName, [min, max]);
                }
                else if (min) {
                    setValidationValues(options, minRuleName, min);
                }
                else if (max) {
                    setValidationValues(options, maxRuleName, max);
                }
            });
        };

        adapters.addSingleVal = function (adapterName, attribute, ruleName) {
            return this.add(adapterName, [attribute || "val"], function (options) {
                setValidationValues(options, ruleName || adapterName, options.params[attribute]);
            });
        };

        $jQval.addMethod("__dummy__", function (value, element, params) {
            return true;
        });

        $jQval.addMethod("regex", function (value, element, params) {
            var match;
            if (this.optional(element)) {
                return true;
            }

            match = new RegExp(params).exec(value);
            return (match && (match.index === 0) && (match[0].length === value.length));
        });

        $jQval.addMethod("nonalphamin", function (value, element, nonalphamin) {
            var match;
            if (nonalphamin) {
                match = value.match(/\W/g);
                match = match && match.length >= nonalphamin;
            }
            return match;
        });

        if ($jQval.methods.extension) {
            adapters.addSingleVal("accept", "mimtype");
            adapters.addSingleVal("extension", "extension");
        } else {
            // for backward compatibility, when the 'extension' validation method does not exist, such as with versions
            // of JQuery Validation plugin prior to 1.10, we should use the 'accept' method for
            // validating the extension, and ignore mime-type validations as they are not supported.
            adapters.addSingleVal("extension", "extension", "accept");
        }

        adapters.addSingleVal("regex", "pattern");
        adapters.addBool("creditcard").addBool("date").addBool("digits").addBool("email").addBool("number").addBool("url");
        adapters.addMinMax("length", "minlength", "maxlength", "rangelength").addMinMax("range", "min", "max", "range");
        adapters.addMinMax("minlength", "minlength").addMinMax("maxlength", "minlength", "maxlength");
        adapters.add("equalto", ["other"], function (options) {
            var prefix = getModelPrefix(options.element.name),
                other = options.params.other,
                fullOtherName = appendModelPrefix(other, prefix),
                element = $(options.form).find(":input").filter("[name='" + escapeAttributeValue(fullOtherName) + "']")[0];

            setValidationValues(options, "equalTo", element);
        });
        adapters.add("required", function (options) {
            // jQuery Validate equates "required" with "mandatory" for checkbox elements
            if (options.element.tagName.toUpperCase() !== "INPUT" || options.element.type.toUpperCase() !== "CHECKBOX") {
                setValidationValues(options, "required", true);
            }
        });
        adapters.add("remote", ["url", "type", "additionalfields"], function (options) {
            var value = {
                url: options.params.url,
                type: options.params.type || "GET",
                data: {}
            },
                prefix = getModelPrefix(options.element.name);

            $.each(splitAndTrim(options.params.additionalfields || options.element.name), function (i, fieldName) {
                var paramName = appendModelPrefix(fieldName, prefix);
                value.data[paramName] = function () {
                    var field = $(options.form).find(":input").filter("[name='" + escapeAttributeValue(paramName) + "']");
                    // For checkboxes and radio buttons, only pick up values from checked fields.
                    if (field.is(":checkbox")) {
                        return field.filter(":checked").val() || field.filter(":hidden").val() || '';
                    }
                    else if (field.is(":radio")) {
                        return field.filter(":checked").val() || '';
                    }
                    return field.val();
                };
            });

            setValidationValues(options, "remote", value);
        });
        adapters.add("password", ["min", "nonalphamin", "regex"], function (options) {
            if (options.params.min) {
                setValidationValues(options, "minlength", options.params.min);
            }
            if (options.params.nonalphamin) {
                setValidationValues(options, "nonalphamin", options.params.nonalphamin);
            }
            if (options.params.regex) {
                setValidationValues(options, "regex", options.params.regex);
            }
        });

        $(function () {
            $jQval.unobtrusive.parse(document);
        });
    }(jQuery));
}
function MessageOnly(data) {
    /*If model is valid*/
    switch (data.model) {
        case "InvalidInput":
            ShowToastr(data.msg, '', 'error', 'toast-top-right');
            return;
    }
    /*Model is null*/
    DialogBoxOnlyMessage('', data);
}
function Edit(lthis, btnEdit, btnReturnValue) {
    $('#' + btnReturnValue).val($(lthis).parent().parent().attr("id"));
    $('#' + btnEdit).click();
}
function RowEditDialoge(btnEdit, btnReturnValue, idvalue) {
    $(btnReturnValue).val(idvalue);
    $('#' + btnEdit).click();
}
function AjaxBegin() {
    $('#div_loading').show();

}
function AjaxComplete() {
    $("#div_loading").hide();
}
function readURL(input) {
    if (input.files && input.files[0]) {
        var reader = new FileReader();
        reader.onload = function (e) {
            $('.avatar').attr('src', e.target.result);
            $("#txtBase64").val(e.target.result);
        }
        reader.readAsDataURL(input.files[0]);
    }
}
function ClearForm(formId) {
    document.getElementById(formId).reset();
}
function DeleteRows(model, id) {
    bootbox.confirm(initializeculture.areyousureyouwantremovethisitem, function (result) {
        if (result) {
            var body = { id: id };
            $.ajax({
                type: "POST",
                url: model,
                data: JSON.stringify(body),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    if (data.isSuccess) {
                        showMessage(data.errorMsg, '', 'success');
                        if (data.RomoveByCurrentId !== undefined && data.RomoveByCurrentId) {
                            $("#" + id).remove();
                        } else {
                            var table = $('.myTable').DataTable();
                            var row = table.row('#' + id).remove().draw();
                        }
                    } else {
                        DialogBoxMessageDelete(initializeculture.error, data.errorMsg)
                    }
                }
            });
        } else {
            return;
        }
    });
}
function DeleteRowsOfterExecut(model, id, promptTitle) {
    bootbox.confirm(promptTitle, function (result) {
        if (result) {
            var body = { id: id };
            $.ajax({
                type: "POST",
                url: model,
                data: JSON.stringify(body),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    if (data.isSuccess) {
                        showMessage(data.errorMsg, '', 'success');
                        if (data.RomoveByCurrentId !== undefined && data.RomoveByCurrentId) {
                            $("#" + id).remove();
                        } else {
                            var table = $('.myTable').DataTable();
                            var row = table.row('#' + id).remove().draw();
                        }
                    } else {
                        DialogBoxMessageDelete(initializeculture.error, data.errorMsg)
                    }
                }
            });
        } else {
            return;
        }
    });
}
function returnMessage(model) {
    var value = null;
    switch (model) {
        case "Lock":
            value = initializeculture.areyousureyouwantlockthisitem;
            break;
        case "Upgrate To Journalist":
            value = "Are you sure, you want Upgrate To Journalist this item?";
            break;
        case "UnLock":
            value = initializeculture.areyousureyouwantunlockthisitem;
            break;
        case "Remove":
            value = initializeculture.areyousureyouwantremovethisitem;
            break;
        case "Publish":
            value = initializeculture.areyousureyouwantpublishthisitem;
            break;
        case "UnPublish":
            value = initializeculture.areyousureyouwantunpublishthisitem;
            break;
        case "Confirm":
            value = initializeculture.areyousureyouwantconfirmthisitem;
            break;
        case "Not Confirm":
            value = initializeculture.areyousureyouwantunconfirmthisitem;
            break;
        case "Display":
            value = "Are you sure, you want Display/Hide this item?";
            break;
        case "SetDefaultLanguage":
            value = initializeculture.areyousureyouwantsetdefaultlanguage;
            break;
        case "RelatedArticle":
            value = initializeculture.RelatedArticle;
            break;
        case "ConvertToEngineer":
            value = "آیا از تبدیل این شخص کاردان به کارشناس اطمینان دارید؟";
            break;
        case "Open":
            value = "آیا مایل به باز کردن دوباره این تیکت می باشید";
            break;
        case "Close":
            value = "آیا مایل به بستن این تیکت می باشید";
            break;
    }
    return value;
}
function Un(model, id, msg) {
    self = msg;
    if ($(msg).attr('jsModel'))
        msg = returnMessage($(msg).attr('jsModel'));
    bootbox.confirm(msg, function (result) {
        if (result) {
            var body = { id: id };
            $.ajax({
                type: "POST",
                url: model,
                data: JSON.stringify(body),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (data) {
                    $(self).find("i:first-child").toggleClass("fa fa-unlock").toggleClass("fa fa-lock");
                    if ($(self).attr('jsModel') == "Lock") {
                        $('#' + id).attr('class', 'bg-red');
                        $(self).attr("title", "UnLock");
                        $(self).attr("jsModel", "UnLock");
                        //return;
                    } else {
                        $('#' + id).attr('class', 'null');
                        $(self).attr("title", "Lock");
                        $(self).attr("jsModel", "Lock");
                        //return;
                    }
                    switch (data.model) {
                        case "InsertPollChoice":
                            alert('');
                            break;
                        case "RemoveRelatedArticle":
                            var table = $('.myTable').DataTable();
                            var row = table.row('#' + id).remove().draw();
                            return;
                        case "AddRelatedArticle":
                            Metronic.blockUI({ target: '#tab', overlayColor: 'none', animate: true });
                            $('#' + id).remove();
                            $('#listBodyTo').load('/Article/RelatedArticle', { id: data.id });
                            Metronic.unblockUI('#tab');
                            return;
                        case "Status":
                            ChangeBackGround('#', id, 'class', '', data.status)
                            showMessage(data.msg, '', 'success');
                            return;
                        case "DefaultPage":
                            window.location.reload(true);
                            return;
                        case "Publish":
                            var table = $('.myTable').DataTable();
                            var row = table.row('#' + id).remove().draw();
                            return;
                        case "PublishArticle":
                            if ($(self).attr("jsmodel") == "Publish") {
                                $(self).attr("jsmodel", "UnPublish");
                                $(self).attr("title", "UnPublish");
                                $(self).text(initializeculture.unpublish);
                            } else {
                                $(self).attr("jsmodel", "Publish");
                                $(self).attr("title", "Publish");
                                $(self).text(initializeculture.publish);
                            }
                            //$('#btnPublishArticle').remove();
                            ShowToastr(initializeculture.edithasbeensuccessfully, '', 'info', 'toast-top-right')
                            return;
                        case "RemoveRow":
                            var table = $('.myTable').DataTable();
                            var row = table.row('#' + id).remove().draw();
                            showMessage(data.errorMsg, '', 'success');
                            return;
                        case "Remove":
                            var table = $('#' + tableID).DataTable();
                            var row = table.row('#' + id).remove().draw();
                            showMessage(data.errorMsg, '', 'success');
                            return;
                        case "DeleteRow":
                            var table = $('.myTable').DataTable();
                            var row = table.row('#' + id).remove().draw();
                            showMessage(data.msg, '', 'success');
                            return;
                        case "Error":
                            showMessage(data.msg, '', 'error');
                            return;
                        case "Success":
                            showMessage(data.msg, '', 'success');
                            return;
                        case "SuccessResetPass":
                            DialogBoxOnlyMessage("*", data.msg);
                            return;
                        case "Reload":
                            window.location.reload(true);
                            return;
                        case "MessageThenReload":
                            if (data.isSuccess) {
                                showMessage(data.msg, '', 'success');
                                setTimeout(function () {
                                    window.location.reload(true)
                                }, 2000);
                            } else {
                                showMessage(data.msg, '', 'error');
                            }
                            return;
                        case "LoadAnotherForm":
                            //Metronic.blockUI({ target: '#tab', overlayColor: 'none', animate: true });
                            $('#sectionContents').load(data.url, { id: data.id }, function () {
                                EditForm($('#sectionContents').html());
                            });
                            //Metronic.unblockUI('#tab');
                            return;
                    }
                    //if (data.isSuccess) {
                    //    $('#' + id).attr('class', 'bg-red');
                    //} else {
                    //    $('#' + id).attr('class', 'null');
                    //}

                }
            });
        }
    })
}
function ChangeBackGround(type, id, attr, value, bool) {
    if (bool) {
        $(type + id).attr(attr, value);
    } else {
        /*showMessage(data.errorMsg, '', 'success');*/
        $(type + id).attr(attr, 'bg-red');
    }
};
function ShowMessage(data) {
    if (data.isSuccess) {
        showMessage(data.msg, '', 'success');
        return;
    }
    showMessage(data.msg, '', 'error');
}
function ShowToastr(_head, _body, _theme, _location) {
    toastr.options = {
        "closeButton": true,
        "debug": false,
        "positionClass": _location,
        "onclick": null,
        "showDuration": "2000",
        "hideDuration": "2000",
        "timeOut": "8000",
        "extendedTimeOut": "2000",
        "showEasing": "swing",
        "hideEasing": "linear",
        "showMethod": "fadeIn",
        "hideMethod": "fadeOut"
    };
    if (_theme == "success")
        toastr.success(_body, _head);
    if (_theme == "error")
        toastr.error(_body, _head);
    if (_theme == "warning")
        toastr.warning(_body, _head);
    if (_theme == "info")
        toastr.info(_body, _head);
}
function getTableId() {
    if (typeof tableID == "undefined") return "tblDefaultInformation";
    return tableID;
}
function getPagingDivId() {
    if (typeof pagingID == "undefined") return "pagination-list";
    return pagingID;
}
function SearchResult(data) {

    var _skipElement = $('#skip');
    var _btnLoader = $('#btnSaveDe');
    var _paggingDivId = getPagingDivId();
    if (data.targetTablepaggingDiv !== undefined) {
        _paggingDivId = data.targetTablepaggingDiv;
    }

    var _tableId = getTableId();
    if (data.targetTable !== undefined) {
        _tableId = data.targetTable;
    }

    if ($('#' + _tableId).attr('parentId')) {
        let _parentId = $('#' + _tableId).attr('parentId');
        _skipElement = $("#" + _parentId).find("#skip");
        _btnLoader = $("#" + _parentId).find('#btnSaveDe');
        _paggingDivId = $("#" + _parentId).find('.pagination-sm').attr('id');
    }
    /* Paging */
    if (typeof data.isSuccess != "undefined" || typeof data.hasPaging != "undefined") {
        if ($('#' + _paggingDivId).data("twbs-pagination"))
            $('#' + _paggingDivId).twbsPagination('destroy');
        $('#' + _paggingDivId).twbsPagination({
            totalPages: data.paging + 1,
            visiblePages: 5,
            startPage: _skipElement.val() != "" ? parseInt(_skipElement.val()) + 1 : 1,
            onPageClick: function (event, page) {
                page = page - 1;
                $('#page-content').text('Page ' + page);
                _skipElement.val('' + page + '');
                _btnLoader.click();
                $('body, html, #' + _tableId).scrollTop(300);
            },
            initiateStartPageClick: false,
        });
    }
    var oTable = $('#' + _tableId).dataTable();
    oTable.fnClearTable();
    var array = data.htmlResult.split('</tr>');
    for (var i = 0; i < array.length - 1; i++) {
        oTable._fnAddTr($(array[i])[0]);
    }
    oTable.fnDraw();
}
function FinishDialog(data) {
    if (data.isSuccess) {
        switch (data.model) {
            case "Alert":
                $("#portlet-form").hide();
                showMessage(data.msg, '', 'success');
                return;
        }
    } else {
        $("#portlet-form").hide();
        showMessage(data.msg, '', 'error');
        return;
    }
}
function SendObj(model, data, success, error) {
    $.ajax({
        type: "POST",
        url: model,
        data: data,
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            success(data);
        },
        error: function (data) {
            error(data);
        }
    });
}
/* Request to server for load HTML */
$(".load-information").live('click', function (e) {
    var plugin = $(this);
    var data = plugin.attr('data');
    var metronicIsEnable = true;
    if (plugin.attr('disableMetronic')) {
        metronicIsEnable = false;
    }
    Metronic.blockUI({ target: plugin.attr('body'), overlayColor: '#000', animate: true });
    Sendobj(plugin.attr('model'), data, function (data) {
        $(plugin.attr('body')).html(data);
        Metronic.unblockUI(plugin.attr('model'));
    },
        function (data) {
            Metronic.unblockUI(plugin.attr('model'));
            return;
        }, "html", "application/html; charset=utf-8", metronicIsEnable, plugin.attr('metronicbody'));
});

function TableRemoveRow(data, tableId) {
    if (data.isSuccess) {
        if (data.tableId != undefined) {
            var table = $('#' + data.tableId).DataTable();
            table.row('#' + data.id).remove().draw();
        } else if (tableId != undefined) {
            var table = $('#' + tableId).DataTable();
            table.row('#' + data.id).remove().draw();
        }
        else {
            $('#' + data.id).remove();
        }
        ShowToastr('', data.msg, 'success', 'toast-bottom-right');

        $("#portlet-form").hide();
        $("#sectionContents").empty()

    } else {
        //DialogBoxOnlyMessage('خطا در انجام عملیات :(', data.msg);
        ShowToastr('خطا', data.msg, 'error', 'toast-bottom-right');
    }
}

$(document).ready(function () {

    $("tr .remove").live('click', function (e) {
        var plugin = $(this);
        var model = $(this).attr('model')
        var value = $(this).attr('id');
        bootbox.confirm(initializeculture.areyousureyouwantremovethisitem, function (result) {
            if (result) {
                var body = {
                    id: value
                };
                SendObj(model, JSON.stringify(body), function (data) {
                    TableRemoveRow(data, plugin.closest("table").attr('id'));
                }, function (data) { });
            } else { return; }
        })
    });

    $("tr .removeByQuestion").live('click', function (e) {
        var plugin = $(this);
        var model = $(this).attr('model')
        var id = $(this).attr('id');
        var personName = $(this).attr('personName');
        var nationalCode = $(this).attr('nationalCode');

        bootbox.prompt({
            title: "آیا از حذف شخص " + personName + " با کدملی " + nationalCode + " مطمئن هستید؟ علت حذف شخص را در کادر زیر وارد نمایید:",
            inputType: 'textarea',
            backdrop: true,

            callback: function (result) {

                if (result === null) {

                } else {
                    var body = { id: id, Description: result };
                    SendObj(model, JSON.stringify(body), function (data) {
                        TableRemoveRow(data, plugin.closest("table").attr('id'));
                    }, function (data) { });
                }
            }
        });

    });

    $("tr .removeLegalByQuestion").live('click', function (e) {
        var plugin = $(this);
        var model = $(this).attr('model')
        var id = $(this).attr('id');

        var personName = $(this).attr('personName');
        if (personName === undefined) personName = " این آیتم ";

        var nationalCode = $(this).attr('nationalCode');
        if (nationalCode === undefined) nationalCode = " - ";

        bootbox.prompt({
            title: "آیا از حذف " + personName + " با شناسه ملی " + nationalCode + " مطمئن هستید؟ علت حذف شرکت یا دفتر را در کادر زیر وارد نمایید:",
            inputType: 'textarea',
            backdrop: true,
            callback: function (result) {
                if (result === null) {

                } else {
                    var body = { id: id, Description: result };
                    SendObj(model, JSON.stringify(body), function (data) {
                        TableRemoveRow(data, plugin.closest("table").attr('id'));
                    }, function (data) { });
                }
            }
        });

    });


    $("tr .removeSimple").live('click', function (e) {
        var plugin = $(this);
        var model = plugin.attr('model')
        var id = plugin.closest("tr").attr('id');
        bootbox.confirm(initializeculture.areyousureyouwantremovethisitem, function (result) {
            if (result) {
                var body = { id: id };
                SendObj(model, JSON.stringify(body), function (data) {
                    if (data.isSuccess) {
                        //var table = $('#' + plugin.closest("table").attr('id')).DataTable();
                        //table.row('#' + data.id).remove().draw();
                        plugin.closest("tr").remove();
                        showMessage(data.msg, '', 'success');
                    } else {
                        DialogBoxOnlyMessage(':(', data.msg);
                    }
                }, function (data) { });
            } else { return; }
        })
    });
    $("tr .archiveMsg").live('click', function (e) {
        var plugin = $(this);
        var model = $(this).attr('model')
        var id = $(this).attr('id');
        bootbox.confirm('آیا مایل به آرشیو کردن این پیام می باشید؟', function (result) {
            if (result) {
                var body = { id: id };
                SendObj(model, JSON.stringify(body), function (data) {
                    if (data.isSuccess) {
                        var table = $('#' + plugin.closest("table").attr('id')).DataTable();
                        table.row('#' + data.id).remove().draw();
                        showMessage(data.msg, '', 'success');
                    } else {
                        DialogBoxOnlyMessage(':(', data.msg);
                    }
                }, function (data) { });
            } else { return; }
        })
    });
    $("#tblFailedLicense").live('click', 'tr .suspend', function (e) {
        var plugin = $(this);
        var model = $(this).attr('model')
        var id = $(this).attr('id');
        bootbox.confirm(initializeculture.areyousureyouwantsuspendthisitem, function (result) {
            if (result) {
                var body = { id: id };
                SendObj(model, JSON.stringify(body), function (data) {
                    if (data.isSuccess) {
                        var table = $("#tblFailedLicense").DataTable();
                        table.row('#' + data.id).remove().draw();
                        showMessage(data.msg, '', 'success');
                    } else {
                        DialogBoxOnlyMessage(':(', data.msg);
                    }
                }, function (data) { });
            } else { return; }
        })
    });
    $("#tblDefaultInformation").on('click', 'tr .Visible', function (e) {
        var plugin = $(this);
        var model = $(this).attr('model')
        var id = $(this).attr('newsId');
        $(plugin.parent().parent()[0]).toggleClass('bg-red');
        var body = { id: id };
        SendObj(model, JSON.stringify(body), function (data) {
            var table = $("#tblNews").DataTable();
            var Row = table.row('#' + id);
            var Td = $('#td+' + id);
            if ($('#' + id).find('.fa-ban').hasClass("fa fa-ban")) {
                $('#' + id).find('.fa-ban').addClass("fa-eye");
                $('#' + id).find('.fa-ban').removeClass("fa-ban");
            }
            else {

                $('#' + id).find('.fa-eye').addClass("fa-ban");
                $('#' + id).find('.fa-eye').removeClass("fa-eye");
            }

            if (data.msg = 'refresh')
                location.reload();
            else
                showMessage(data.msg, '', 'success');

        }, function (data) { });
    });
    $(".LicenseTypeEffectiveRateFormula").click(function () {
        var body = { LicenseTypeId: $(this).val(), EffectiveRateFormulaId: $(this).attr('page') };
        SendObj('/BaseInfo/LicenseTypeEffectiveRateFormula', JSON.stringify(body), function (data) {
            if (data.isSuccess) {
                ShowToastr(data.msg, '', 'success', 'toast-bottom-right');
            } else {
                DialogBoxOnlyMessage(':(', data.msg);
            }
        }, function (data) { });
    });
    $(".ProcessRolePermission").click(function () {
        var body = { ProcessId: $(this).attr('page'), RoleId: $(this).val() };
        SendObj('/BaseInfo/_ProcessRolePermission', JSON.stringify(body), function (data) {
            if (data.isSuccess) {
                ShowToastr(data.msg, '', 'success', 'toast-bottom-right');
            } else {
                DialogBoxOnlyMessage(':(', data.msg);
            }
        }, function (data) { });
    });
    $(".StepRolePermisson").click(function () {
        var body = { StepId: $(this).attr('page'), RoleId: $(this).val() };

        SendObj('/BaseInfo/_StepRolePermisson', JSON.stringify(body), function (data) {
            if (data.isSuccess) {
                ShowToastr(data.msg, '', 'success', 'toast-bottom-right');
            } else {
                DialogBoxOnlyMessage(':(', data.msg);
            }
        }, function (data) { });
    });
    $(".StepDocumentCategoryTypeOption").click(function () {
        var body = { StepDocumentCategoryTypeId: $(this).val(), OptionId: $(this).attr('page') };

        SendObj('/BaseInfo/_StepDocumentCategoryTypeOption', JSON.stringify(body), function (data) {
            if (data.isSuccess) {
                ShowToastr(data.msg, '', 'success', 'toast-bottom-right');
            } else {
                DialogBoxOnlyMessage(':(', data.msg);
            }
        }, function (data) { });
    });
    $(".StepInquiry").click(function () {
        var body = { ProcessInquiryId: $(this).val(), StepId: $(this).attr('page') };

        SendObj('/BaseInfo/_StepInquiry', JSON.stringify(body), function (data) {
            if (data.isSuccess) {
                ShowToastr(data.msg, '', 'success', 'toast-bottom-right');
            } else {
                DialogBoxOnlyMessage(':(', data.msg);
            }
        }, function (data) { });
    });
    $(".UserProvince").click(function () {
        var body = { ProvinceId: $(this).val(), UserId: $(this).attr('page') };
        SendObj('/Account/_UserProvince', JSON.stringify(body), function (data) {
            if (data.isSuccess) {
                ShowToastr(data.msg, '', 'success', 'toast-bottom-right');
            } else {
                DialogBoxOnlyMessage(':(', data.msg);
            }
        }, function (data) { });
    });
    $(".MessageRolePermission").click(function () {
        var body = { ReceiverRoleId: $(this).val(), SenderRoleId: $(this).attr('senderId') };
        SendObj('/Account/_MessageRolePermission', JSON.stringify(body), function (data) {
            if (data.isSuccess) {
                ShowToastr(data.msg, '', 'success', 'toast-bottom-right');
            } else {
                DialogBoxOnlyMessage(':(', data.msg);
            }
        }, function (data) { });
    });
    $('#getPersonId').click(function () {
        var personID = $('input[name=PersonId]').val();
        if (personID.trim() == "") {
            ShowToastr('خطا', 'گام انتخاب عضو با موفقیت ثبت یا انتخاب نشده است.', 'error', 'toast-bottom-right');
            return;
        }
        $('#btnnext').click();

    });
    $('#getOfficeId').click(function () {
        var OfficeID = $('input[name=OfficeId]').val();
        if (OfficeID.trim() == "")
        //if ($('#getPersonId').attr('model') == "") 
        {
            ShowToastr('خطا', 'گام انتخاب دفتر با موفقیت ثبت یا انتخاب نشده است.', 'error', 'toast-bottom-right');
            return;
        }
        $('#btnnext').click();

    });
    $('li a').click(function () {
        var table = $(this).attr('table');
        if (typeof table != 'undefined') {
            defaultTable = table;
        }
    });
    $('.loadoverHTML').click(function () {
        /* this */
        var plugin = $(this);
        /* if allExpireMessage is null or empty, send request to server for load data and show to user, otherwise request could not be send. */
        if ($('#allExpireMessage').html()) return;
        var data = plugin.attr('data');
        var metronicIsEnable = true;
        if (plugin.attr('disableMetronic') == 'true') {
            metronicIsEnable = false;
        }
        Sendobj(plugin.attr('model'), data, function (data) {
            $(plugin.attr('body')).html(data);
        }, function (data) {
            return;
        }, "html", "application/html; charset=utf-8", metronicIsEnable, plugin.attr('metronicbody'));
    });
    $('body').on('click', '.loadLazyMore', function () {
        /* this */
        var plugin = $(this);
        var data = plugin.attr('data');
        var metronicIsEnable = true;
        if (plugin.attr('disableMetronic')) {
            metronicIsEnable = false;
        }
        var model = plugin.attr('model') + "?take=" + plugin.attr('take') + "&skip=" + plugin.attr('skip');
        Metronic.blockUI($(this));
        Sendobj(model, data, function (data) {
            Metronic.unblockUI($(this));
            /* در صورتی که ابجکت بازگشتی نال یا خالی باشد شی کلیک شده حذف میشود. */
            if (data == "") {
                $(plugin).remove();
                return;
            }
            var number = $(plugin).attr('skip');
            $(plugin).attr('skip', parseInt(number) + 1);
            $(plugin.attr('body')).append(data);
            //$('.lazyListCount').html($('#newsPanel .item').length);
            var t = "";
        }, function (data) {
            Metronic.unblockUI($(this));
            alert('no');
            return;
        }, "html", "application/html; charset=utf-8", metronicIsEnable, plugin.attr('metronicbody'));
    });
    $('.LoadSecurityCouncilMandate').click(function () {
        /* this */
        var plugin = $(this);
        var data = plugin.attr('data');
        var metronicIsEnable = true;
        if (plugin.attr('disableMetronic')) {
            metronicIsEnable = false;
        }
        var model = plugin.attr('model') + "?take=" + plugin.attr('take') + "&skip=" + plugin.attr('skip') + "&partialView=" + plugin.attr('partialView');
        Sendobj(model, data, function (data) {
            if (data == "") {
                $(plugin).remove();
                return;
            }
            var number = $(plugin).attr('skip');
            $(plugin).attr('skip', parseInt(number) + 1);
            $(plugin.attr('body')).append(data);
        }, function (data) {
            alert('no');
            return;
        }, "html", "application/html; charset=utf-8", metronicIsEnable, plugin.attr('metronicbody'));
    });
    $('.selectProvinceBtn').on("click", function () {
        $(".selectProvinceBtn img").removeClass("d-none");
        SendObj("/BaseInfo/SelectProvince", "", function (data) {
            SelectProvinceDailog(data);
        }, function (data) {
            SelectProvinceDailog(data);
        });
    });
});
function RegisterApplicant(data) {
    if (data.isSuccess) {
        personId = data.personId;
        $('#getPersonId').attr('model', "/Person/PersonEducation/" + data.personId);
        $('#requestProcess').attr('model', "/Process/RequestProcess/" + data.personId + "?processId=" + data.processId);
        $('#submitProcess').attr('href', "/Process/CreateProcessPost/0?ProcessId=" + data.processId + "&ApplicantId=" + data.personId);
        ShowToastr('', data.msg, 'success', 'toast-bottom-right');
        ClearForm('RegisterApplicant');
        return;
    } else {
        for (var i = 0; i < data.error.length; i++) {
            ShowToastr('', data.error[i], 'error', 'toast-bottom-right');
        }
        ShowToastr('', data.msg, 'error', 'toast-bottom-right');
    }
}
function SuccessMessage(data) {
    if (data.isSuccess == true) {
        ShowToastr('', data.msg, 'success', 'toast-bottom-right');
        scrolToUp('html, body');
        return;
    } else {

        return;
    }
}
function scrolToUp(selector) {
    $(selector).animate({
        scrollTop: 0
    }, 600);
}
function TrackingCode(data) {
    if (typeof data.isSuccess != "undefined" && !data.isSuccess) {
        ShowToastr(data.title, data.msg, 'error', 'toast-bottom-right');
        $('#trackingCode').val('');
        $('#trackingCode').focus();
        return;
    }
    MessageOnly(data);
    $('#trackingCode').val('');
    $('#trackingCode').focus();
}
$(document).on('click', "[readmore]", function () {
    if ($(this).attr('readmore') == "showpartial") {
        var _id = $(this).attr('itemid');
        var title = $(this).attr('itemtitle');
        var model = $(this).attr('model');
        var body = { id: _id };
        SendObj(model, JSON.stringify(body), function (data) {
            DialogBoxOnlyMessage(title, data);
        }, function (data) {
            DialogBoxOnlyMessage(title, data.responseText);
        });
    } else {
        var text = $('#' + $(this).attr('model')).html();
        DialogBoxOnlyMessage($(this)[0].innerHTML, text);
    }
});
$("[load-more]").live('click', function () {
    var plugin = $(this);
    var data = plugin.attr('data');
    var title = plugin.attr('title') !== undefined ? plugin.attr('title') : "";
    var modalwidth = plugin.attr('modalwidth') !== undefined ? plugin.attr('modalwidth') : "";
    title = plugin.attr('data-original-title') !== undefined && title == "" ? plugin.attr('data-original-title') : "";
    var metronicIsEnable = true;
    if (validProperties(plugin.attr('disableMetronic'))) metronicIsEnable = false;
    if (!validProperties(plugin.attr('model'))) { ShowToastr('ERROR - Load-More', 'Model object not found.', 'error', 'toast-bottom-right'); return; }
    Sendobj(plugin.attr('model'), data, function (data) {
        if (!validProperties(plugin.attr('body'))) { DialogBoxOnlyMessage(title, data, modalwidth); return; } $(plugin.attr('body')).html(data);
        karinSetPer2480(); return;
    }, function (data) { return; }, "html", "application/html; charset=utf-8", metronicIsEnable, plugin.attr('metronicbody'));
    if (validProperties("reload-again") && plugin.attr("reload-again") == "false") {
        plugin.off();
        plugin.removeAttr("load-more");
    }
});
function Sendobj(model, data, success, error, dataType, contentType, metronicIsEnable, metronicTarget) {
    if (metronicIsEnable) {
        Metronic.blockUI(metronicTarget)
    }
    if (dataType == null) {
        dataType = "json";
    }
    if (contentType == null) {
        contentType = "application/json; charset=utf-8";
    }
    $.ajax({
        type: "POST",
        url: model,
        data: data,
        contentType: contentType,
        dataType: dataType,
        success: function (data) {
            if (metronicIsEnable) {
                Metronic.unblockUI(metronicTarget);
            }
            success(data);
        },
        error: function (data) {
            error(data);
            if (metronicIsEnable) {
                Metronic.unblockUI(metronicTarget)
            }
        }
    });
}
function validProperties(model) {
    return typeof model != "undefined";
}
$("[submit-form]").click(function () {
    $($(this).attr('submit-form')).click();
});
$("[k-select-box]").click(function () {
    SendObj($(this).attr('model'), "{}", function (data) {
        if (data.isSuccess) {
            ShowToastr(data.msg, '', 'success', 'toast-bottom-right');
        } else {
            DialogBoxOnlyMessage(':(', data.msg);
        }
    }, function (data) { });
});

$('[load-partial]').live("click", function () {
    Sendobj($(this).attr('load-partial'), $(this).attr('data'), function (data) { InsertDialog(data); }, function (data) { ShowToastr('در ارتباط با سرور خطا رخ داده است ، مجدد تلاش کنید.', '', 'error', 'toast-bottom-right'); }, "html", "application/html; charset=utf-8", true, $(this).id);
});
$('[load-partial-message]').live("click", function () {
    if ($(this).attr('isread') == 0) {
        $(this).closest('.messageRec').hide();
        if ($('.messageCountBage').length > 0) {
            if ((parseInt($('.messageCountBage').html()) - 1) == 0) {
                $('li.message_notification_bar').hide();
            }
            else
                $('.messageCountBage').html(parseInt($('.messageCountBage').html()) - 1);
        }
    }
    Sendobj($(this).attr('load-partial-message'),
        $(this).attr('data'),
        function (data) {
            DialogBoxOnlyMessage('جزئیات', data);
        }, function (data) {
            ShowToastr('در ارتباط با سرور خطا رخ داده است ، مجدد تلاش کنید.', '', 'error', 'toast-bottom-right');
        },
        "html",
        "application/html; charset=utf-8"
        , true, $(this).id
    );
});
$('[load-partial-messageLarge]').live("click", function () {
    Sendobj($(this).attr('load-partial-messageLarge'),
        $(this).attr('data'),
        function (data) {
            DialogBoxMaxOnlyMessage('جزئیات', data);
        }, function (data) {
            ShowToastr('در ارتباط با سرور خطا رخ داده است ، مجدد تلاش کنید.', '', 'error', 'toast-bottom-right');
        },
        "html",
        "application/html; charset=utf-8"
        , true, $(this).id
    );
});


$(document).on('change', "[dropdown-initilize]", function () {
    var plugin = $(this);
    var model = $(this).attr('model');
    var id = $(this).val();
    var drop2 = $(this).attr('drop');
    var idvalue = $(this).attr('idvalue');

    var para = JSON.stringify({ id: id });
    if (idvalue != undefined && idvalue != null && idvalue != "") {
        para = JSON.stringify({ id: id, idvalue: idvalue });
    }

    $('#' + drop2).empty();
    SendObj(model, para, function (data) {
        if (data.isSuccess) {
            $.each(data.drop, function (index, value) {
                //$('#' + drop2).append(new Option(value[1], value[0], false, false));
                $('#' + drop2).append(new Option(value.title, value.id, false, false));
            });
        } else {
            /**/
        }
    }, function (data) {

    });


});
function SelectProvinceDailog(data) {
    $("#sectionSelectProvince").html(data.responseText);
    $('#modal-right-provinces').modal();
    $(".selectProvinceBtn img").addClass("d-none");
}
function setProvince(pid) {
    var body = { id: pid };
    $.ajax({
        type: "POST",
        url: "/BaseInfo/SetProvince",
        data: JSON.stringify(body),
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            if (data.isSuccess == true) {
                location.reload();
            }
            else {
                showMessage(data.msg, '', 'error');
            }
        }
    });
}
function selectDropDown(element, value) { $(element).val(value); }
function returnDropdownValue(element, text) { return $(element + " option:contains('" + text + "')").attr('value'); }
function FullDialogBoxOnlyMessage(title, body) {
    var h = "<div class='modal fade in' id='portlet-form' tabindex='-1' role='dialog' aria-labelledby='myModalLabel' aria-hidden='false' style='display: block;'>";
    h += "<div class='modal-backdrop fade in'></div><div class='modal-dialog animated bounceInDown full-dialog-mode'><div class='modal-content'><div class='modal-header'><button type='button' class='close' data-dismiss='modal' aria-hidden='true' onclick='$(\"#portlet-form\").hide();'></button>";
    h += "<h4 class='modal-title'>" + title + "</h4></div><div class='modal-body' style='max-height:450px;overflow-y:auto'>";
    h += body;
    h += "</div><div class='modal-footer'><button type='button' onclick='$(\"#portlet-form\").hide();' class='btn btn-danger' data-dismiss='modal'><i class=\"fa fa-close\"></i>&nbsp; بستن</button></div></div></div></div>";
    $("#sectionContents").html(h);
}
function FullDialogBoxOnlyMessageDetail(title, body) {
    var h = "<div class='modal fade in' id='portlet-formDetail' tabindex='-1' role='dialog' aria-labelledby='myModalLabel' aria-hidden='false' style='display: block;'>";
    h += "<div class='modal-backdrop fade in'></div><div class='modal-dialog animated bounceInDown full-dialog-mode' ><div class='modal-content'><div class='modal-header'><button type='button' class='close' data-dismiss='modal' aria-hidden='true' onclick='$(\"#portlet-formDetail\").hide();'></button>";
    h += "<h4 class='modal-title'>" + title + "</h4></div><div class='modal-body' style='max-height:450px;overflow-y:auto'>";
    h += body;
    h += "</div><div class='modal-footer'><button type='button' onclick='$(\"#portlet-formDetail\").hide();' class='btn btn-cancel' data-dismiss='modal'><i class=\"fa fa-close\"></i>&nbsp; بستن</button></div></div></div></div>";
    $("#PreviewsectionContents").html(h);
}
function toPersianNumber() {
    /* ۰ ۱ ۲ ۳ ۴ ۵ ۶ ۷ ۸ ۹ */
    $('.farsiNumber').each(function () {
        if ($(this).html() != '') {
            $(this).html($(this).html().replace(/0/g, '۰'));
            $(this).html($(this).html().replace(/1/g, '۱'));
            $(this).html($(this).html().replace(/2/g, '۲'));
            $(this).html($(this).html().replace(/3/g, '۳'));
            $(this).html($(this).html().replace(/4/g, '۴'));
            $(this).html($(this).html().replace(/5/g, '۵'));
            $(this).html($(this).html().replace(/6/g, '۶'));
            $(this).html($(this).html().replace(/7/g, '۷'));
            $(this).html($(this).html().replace(/8/g, '۸'));
            $(this).html($(this).html().replace(/9/g, '۹'));
        }
    });
    try { toRemovePersianNumber(); } catch (e) { }
}
function PrintElem(elem) {
    var mywindow = window.open('', 'PRINT', 'height=400,width=600');
    mywindow.document.write('<html><head><title>' + document.title + '</title>');
    mywindow.document.write('<style type="text/css">' +
        'table th, table td {' +
        'border:1px solid #000;' +
        'padding:0.5em;' +
        'font-size:13px;' +
        '}' +
        'body{direction:rtl; font-family:tahoma; font-size:13px}' +
        '</style>');
    mywindow.document.write('</head><body>');
    mywindow.document.write(document.getElementById(elem).innerHTML);
    mywindow.document.write('</body></html>');
    mywindow.document.close(); // necessary for IE >= 10
    mywindow.focus(); // necessary for IE >= 10*/
    mywindow.print();
    mywindow.close();
    return true;
}


function SaveFormUploadAndReplaceNewLicFile(mdata) {
    if (!mdata.isSuccess) {
        showMessage(mdata.msg, '', 'error');
        return false;
    }

    show_loading('.modal-content');

    $.ajaxFileUpload({
        url: "/ProcessRequest/UploadAndReplaceNewLicFile", // مسیری که باید فایل به آن ارسال شود
        secureuri: false,
        fileElementId: 'licFile', // آی دی المان ورودی فایل
        dataType: 'json',
        data: { LicenseId: mdata.LicenseId },// اطلاعات اضافی در صورت نیاز
        success: function (data, status) {
            if (data.isSuccess) {
                showMessage('توجه!!!', data.msg, 'success');
                $("#portlet-form").hide();
                $("#sectionContents").empty();
                $("#sectionContents").html("");
                hide_loading('form#UploadLicForm');
            } else {
                showMessage('خطا', data.msg, 'error');
            }
        },
        error: function (data, status, e) {
            var ss = data.responseText.replace('<pre style="word-wrap: break-word; white-space: pre-wrap;">', '');
            ss = ss.replace('<pre>', '');
            ss = ss.replace('</pre>', '');
            ss = ss.replace('<div class="json-formatter-container"></div>', '');
            const obj = JSON.parse(ss);
            Finish(obj);
            hide_loading('.modal-content');
            hide_loading('form#UploadLicForm');
            if (obj.isSuccess) {
                $("#portlet-form").hide();
                $("#sectionContents").empty();
                $("#sectionContents").html("");
            }
        }
    });

}

function uploadFileTicketAjax(arg) {

    if (arg.isSuccess) {
        var tagFileElementId = "ticketFile";
        if ($('#ticketReferralFile').val() != null && $('#ticketReferralFile').val() != undefined) {
            tagFileElementId = "ticketReferralFile";
        }

        $.ajaxFileUpload({
            //url: "@Url.Action("UploadFileTicket", "Support")", // مسیری که باید فایل به آن ارسال شود
            url: "/" + arg.controller + "/UploadFileTicket", // مسیری که باید فایل به آن ارسال شود
            secureuri: false,
            fileElementId: tagFileElementId, // آی دی المان ورودی فایل
            dataType: 'json',
            data: { TicketId: arg.TicketId, isEditStatus: arg.isEditStatus }, // اطلاعات اضافی در صورت نیاز
            success: function (data) {
                if (data.isSuccess) {
                    showMessage(data.msg, '', 'success');
                    location.reload();
                    return;
                } else {
                    showMessage(data.msg, '', 'error');
                    return;
                }
            },
            error: function (data, status, e) {
                var jsonStr = data.responseText.replace("<pre>", "").replace("</pre>", "");
                try {
                    var index = jsonStr.indexOf("{");
                    if (index > 0) {
                        jsonStr = data.responseText.substr(index);
                    }
                    index = jsonStr.indexOf("}");
                    if (index > 0) {
                        jsonStr = jsonStr.substr(0, index + 1);
                    }
                } catch (e) {

                }

                var jsonObj;
                try {
                    jsonObj = JSON.parse(jsonStr);
                } catch (e) {
                    if (data.responseText.indexOf('موفقیت') > 0) {
                        jsonObj = JSON.parse("{'isSuccess':true,'msg':'ثبت با موفقیت انجام شد','model':'refresh'}");
                    }
                }

                if (jsonObj.isSuccess != undefined && jsonObj.isSuccess) {
                    showMessage(jsonObj.msg, '', 'success');
                    setTimeout(location.reload(), 3000);
                    return;
                } else {
                    console.log(e);
                    console.log(status);
                    $("#form-body").unblock();
                    showMessage('خطای ارسال فایل!', "حجم و یا فرمت فایل انتخاب  شده  مغایرت دارد" + " status:" + status, 'error');
                    //alert('خطای ارسال فایل!');
                }
            }
        });
    } else {
        showMessage(arg.msg, '', 'error');
        $("#form-body").unblock();
        return;
    }

}

function PromptDialog(argTitle, argMessage, argCallback, argIcon, argClassName, argCloseButton) {

    if (argIcon === "") {
        argIcon = "fa fa-exclamation-triangle";
    }
    if (argTitle === "" && argCloseButton === false) {
        var dialog = bootbox.dialog({
            className: 'AuthenticationAlertBootBox',
            message: "<p class='" + argClassName + "'><i class='" + argIcon + " ml-3'></i> " + argMessage + "</p>",
            closeButton: argCloseButton,
            buttons: {
                ok: {
                    label: "متوجه شدم ...",
                    className: 'btn btn-primary',
                    callback: argCallback
                }
            }
        });
        return dialog;
    } else {
        var dialog = bootbox.dialog({
            title: argTitle,
            className: 'AuthenticationAlertBootBox',
            message: "<p class='" + argClassName + "'><i class='" + argIcon + " ml-3'></i> " + argMessage + "</p>",
            closeButton: argCloseButton,
            buttons: {
                ok: {
                    label: "متوجه شدم ...",
                    className: 'btn btn-primary',
                    callback: argCallback
                }
            }
        });
        return dialog;
    }
}

function AuthenticationAlert() {
    var element = document.getElementsByClassName("AuthenticationAlert");
    if (element.length == 0) {
        var dialog = PromptDialog('', 'احـراز هـویت نامـوفق<span>لطفا مجددا وارد سامانه شوید</span>', function () { redirectToRoot(); }, 'fa fa-exclamation-triangle', '', false);
        dialog.find('.modal-content').addClass("AuthenticationAlert");
        for (i = 0; i < 100; i++) {
            window.clearInterval(i);
        }
    }
}

function AjaxMethodOnFailure(data) {
    if (data !== undefined && (data.statusText === "Unauthorized" || data.status === 401)) {
        AuthenticationAlert();
    } else {
        PromptDialog('خطا در پردازش اطلاعت', 'خطای رخ داده است، لطفا در زمان دیگری سعی نمایید', function () { return; }, 'fa fa-exclamation-triangle', '', true);
    }
}

function redirectToRoot() {
    $('.se-pre-con').css({ 'display': 'inherit' });
    $('.se-pre-con').html("<span>درحال انتقال به صفحه ورود . . .</span>");
    const relativeURL = '/';
    const absoluteURL = new URL(relativeURL, window.location.href);
    window.location.href = absoluteURL.href;
}

var TimeCountDown;

$('div.userSessionTimeOut').on('show.bs.dropdown', function () {
    $("#userSessionTimeOutCounter").html('<i class="fa fa-spinner fa-pulse"></i>');
    $("div.userSessionTimeOut span.userSessionLoginDateTime").html('<i class="fa fa-spinner fa-pulse"></i>');
    $.ajax({
        type: "POST",
        url: "/log/SessionTimeOutReview",
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {

            if (data.sessionManagerIsOff === true) {
                document.getElementById("userSessionTimeOutCounter").innerHTML = 'off';
                $("div.userSessionTimeOut span.userSessionLoginDateTime").html('مدیریت جلسات غیر فعال میباشد');
                return;
            }

            if (data.sessionManagerIsOff === false && (data.IsAuthenticated === false || (data.minute === 0 && data.sec === 0))) {
                AuthenticationAlert();
                clearInterval(intervalAuthenticationCheckId);
                timerCountdown(data.hour, data.minute, data.sec, "userSessionTimeOutCounter");
                $("div.userSessionTimeOut span.userSessionLoginDateTime").html(data.LoginTimeStr);
            }

            if (data.isSuccess == true && data.IsAuthenticated === true) {
                timerCountdown(data.hour, data.minute, data.sec, "userSessionTimeOutCounter");
                $("div.userSessionTimeOut span.userSessionLoginDateTime").html(data.LoginTimeStr);
            }

            if (data.msg !== "") {
                showMessage(data.msg, '', 'error');
            }
        }
    });
});

$('div.userSessionTimeOut').on('hide.bs.dropdown', function () {
    clearInterval(TimeCountDown);
});

function timerCountdown(_hour, _minute, _sec, ElementById) {
    var hour = _hour;//5
    var minute = _minute;//5
    var sec = _sec;//60
    TimeCountDown = setInterval(function () {
        document.getElementById(ElementById).innerHTML = (hour < 10 ? "0" + hour : hour) + ":" + (minute < 10 ? "0" + minute : minute) + ":" + (sec < 10 ? "0" + sec : sec);
        sec--;
        if (hour <= 0 && minute <= 0 && sec <= 0) {
            hour = 0;
            minute = 0;
            sec = 0;
            document.getElementById(ElementById).innerHTML = "00:00:00";
            clearInterval();
            AuthenticationAlert();
            clearInterval(intervalAuthenticationCheckId);
            clearInterval(TimeCountDown);
            return;
        }
        if (sec == 0) {
            if (minute <= 0) {
                if (hour > 0) {
                    minute = 59;
                    sec = 59;
                    hour--;
                } else {
                    minute = 0;
                    hour = 0;
                    sec = 60;
                }
            } else {
                minute--;
                sec = 59;
            }
        }
    }, 1000);
}

function AuthenticationCheck() {
    $.ajax({
        type: "POST",
        url: "/log/SessionTimeOutReview",
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function (data) {
            if (data.sessionManagerIsOff === true) {
                $("div.userSessionTimeOut").hide();
                return;
            } else {
                $("div.userSessionTimeOut").show();
            }
            if (data.sessionManagerIsOff === false && (data.IsAuthenticated === false || (data.hour === 0 && data.minute === 0 && data.sec === 0))) {
                AuthenticationAlert();
                clearInterval(intervalAuthenticationCheckId);
            }
        },
        statusCode: {
            200: function () {

            },
            401: function () {
                clearInterval(intervalAuthenticationCheckId);
                AuthenticationAlert();
            }
        }
    });
}

function IMSCheck(RequestId, IsReal) {
    $("#imsstatus").html("");
    $("#imsstatus").css("color", "#000000");
    $("#imsstatus").html("در حال بار گذاری ...");

    $.ajax({
        url: "/ProcessRequest/IMSCheck/",
        type: "POST",
        data:
        {
            id: RequestId,
            isReal: IsReal,
        },
        success: function (data) {
            if (data.isSuccess) {
                $("#imsstatus").html("");
                $("#imsstatus").css("color", "#689f38");
                $("#imsstatus").html(data.error);
            } else {
                $("#imsstatus").html("");
                $("#imsstatus").css("color", "#e8000e");
                $("#imsstatus").html(data.error);
            }
        },
        error: function (er) {
            ShowToastr('خطا', '', data.model, 'toast-bottom-right');
            $("#imsstatus").html("");
        }
    });
}
